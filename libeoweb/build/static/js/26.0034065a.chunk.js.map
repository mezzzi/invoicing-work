{"version":3,"sources":["screens/Partner/index.tsx","context/Partners/queries.ts","context/Partner/context.ts","context/Partner/queries.ts","context/Partner/provider.tsx","context/Partner/index.tsx","components/Addresses/context/context.tsx","components/Addresses/context/hoc.tsx","components/Addresses/context/index.tsx","utils/legal-form.ts","context/Addresses/context.ts","context/Addresses/hoc.tsx","context/Addresses/queries.ts","context/Addresses/provider.tsx","context/Addresses/index.tsx","components/Addresses/index.tsx","components/Addresses/AddressForm.tsx","components/Company/Detail.tsx"],"names":["PartnersComponent","state","close","addressDone","contactDone","_this2","this","match","props","react__WEBPACK_IMPORTED_MODULE_20__","context_Partner__WEBPACK_IMPORTED_MODULE_19__","id","params","_ref","partner","data","context_Contacts__WEBPACK_IMPORTED_MODULE_18__","components_Contacts_context__WEBPACK_IMPORTED_MODULE_15__","_ref2","sidebarContact","editContact","editing","components_Contacts__WEBPACK_IMPORTED_MODULE_14__","onUpdate","refetch","companyId","components_Addresses_context__WEBPACK_IMPORTED_MODULE_11__","_ref3","sidebarAddress","editAddress","components_Addresses_AddressForm__WEBPACK_IMPORTED_MODULE_10__","components_Layout__WEBPACK_IMPORTED_MODULE_16__","style","maxWidth","width","closable","onClose","bind","done","sidebar","antd_es_row__WEBPACK_IMPORTED_MODULE_1__","className","antd_es_col__WEBPACK_IMPORTED_MODULE_3__","span","components_Button__WEBPACK_IMPORTED_MODULE_12__","react_intl__WEBPACK_IMPORTED_MODULE_21__","components_Typo__WEBPACK_IMPORTED_MODULE_17__","css","flex","flexSize","name","brandName","components_Company_Detail__WEBPACK_IMPORTED_MODULE_13__","company","addresses","rows","components_Addresses__WEBPACK_IMPORTED_MODULE_9__","contacts","React","withRouter","gql","_templateObject","Addresses","fragment","Contacts","Company","Emails","query","partners","_templateObject2","_templateObject3","create","Provider","Consumer","createPartner","input","PartnerContextProvider","_create","Object","asyncToGenerator","regenerator_default","a","mark","_callee","inputPartner","partnersVariables","dataPartner","results","wrap","_context","prev","next","_this","variables","sent","t0","abrupt","stop","_x","_x2","apply","arguments","react","value","objectSpread","children","compose","withApollo","Alert","User","graphql","options","skip","__webpack_require__","d","__webpack_exports__","provider","Context","edit","selectedAddress","undefined","composedProvider","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","address","withEditAddressesHoc","Component","_React$Component","WithEditAddressesHoc","inherits","createClass","key","assign","hoc","legalForm","all","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","response","fetch","json","withAddresses","WithAddresses","createOrUpdateAddress","fragments","PartnersContextProvider","inputAddress","errorOrSuccess","alert","parseError","_this$props","react__WEBPACK_IMPORTED_MODULE_14__","components_Wrapper__WEBPACK_IMPORTED_MODULE_13__","antd_es_row__WEBPACK_IMPORTED_MODULE_3__","components_Typo__WEBPACK_IMPORTED_MODULE_12__","react_intl__WEBPACK_IMPORTED_MODULE_15__","gutter","map","i","antd_es_col__WEBPACK_IMPORTED_MODULE_1__","concat","values","count","onClick","components_Assets__WEBPACK_IMPORTED_MODULE_9__","IconValue","Pencil","address1","address2","zipcode","city","country","siret","components_Button__WEBPACK_IMPORTED_MODULE_11__","AddressForm","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__","submit","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default","_callee2","e","_context2","preventDefault","form","validateFields","err","updated","parseInt","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_3__","_x3","handleSubmit","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_10__","_this$props2","intl","defaultValues","react__WEBPACK_IMPORTED_MODULE_13__","context_Addresses__WEBPACK_IMPORTED_MODULE_12__","antd_es_form__WEBPACK_IMPORTED_MODULE_1__","onSubmit","components_Form__WEBPACK_IMPORTED_MODULE_11__","defaultValue","label","rules","message","formatMessage","required","injectIntl","Detail","antd_es_collapse__WEBPACK_IMPORTED_MODULE_12__","Panel","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_8__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_9__","legalForms","type","siren","vatNumber","naf","capital","toDisplayDate","incorporationAt","numberEmployees"],"mappings":"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","file":"static/js/26.0034065a.chunk.js","sourcesContent":["import { Col, Layout, Row } from 'antd';\nimport Addresses from 'components/Addresses';\nimport AddressForm from 'components/Addresses/AddressForm';\nimport * as EditAddressCtx from 'components/Addresses/context';\nimport { IEditAddressesContext } from 'components/Addresses/context/context';\nimport { Back } from 'components/Button';\nimport Detail from 'components/Company/Detail';\nimport { ContactForm, Contacts } from 'components/Contacts';\nimport * as EditContactsCtx from 'components/Contacts/context';\nimport { IEditContactContext } from 'components/Contacts/context/context';\nimport { Content, RightSideBar } from 'components/Layout';\nimport { H1, H2 } from 'components/Typo';\nimport { IAddress } from 'context/Addresses/types';\nimport * as ContactsCtx from 'context/Contacts';\nimport { IContact } from 'context/Contacts/types';\nimport * as Partner from 'context/Partner';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RouteComponentProps, withRouter } from 'react-router';\n// import ContactForm from './ContactForm';\n// import Contacts from './Contacts';\nimport Header from './Header';\nimport './Styles.css';\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {}\n\nclass PartnersComponent extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  close = (addressDone?: () => void, contactDone?: () => void) => {\n    addressDone && addressDone();\n    contactDone && contactDone();\n  };\n\n  render() {\n    const match: any = this.props.match;\n\n    return (\n      <Partner.Provider id={match.params.id}>\n        <Partner.Consumer>\n          {({ partner }) => {\n            const data = partner && partner.data;\n            if (!data) {\n              return;\n            }\n\n            return (\n              <ContactsCtx.Provider>\n                <EditContactsCtx.Provider>\n                  <EditContactsCtx.Consumer>\n                    {({ editContact }) => {\n                      let sidebarContact: React.ReactNode;\n\n                      if (editContact && editContact.editing) {\n                        sidebarContact = (\n                          <ContactForm\n                            onUpdate={data && data.refetch}\n                            companyId={data.partner && data.partner.id}\n                          />\n                        );\n                      }\n\n                      return (\n                        <EditAddressCtx.Provider>\n                          <EditAddressCtx.Consumer>\n                            {({ editAddress }) => {\n                              let sidebarAddress: React.ReactNode;\n\n                              if (editAddress && editAddress.editing) {\n                                sidebarAddress = (\n                                  <AddressForm\n                                    onUpdate={data && data.refetch}\n                                    companyId={data.partner && data.partner.id}\n                                  />\n                                );\n                              }\n\n                              return (\n                                <RightSideBar\n                                  style={{\n                                    maxWidth: 400,\n                                    width: '100%',\n                                  }}\n                                  closable={true}\n                                  onClose={this.close.bind(\n                                    null,\n                                    editContact && editContact.done,\n                                    editAddress && editAddress.done,\n                                  )}\n                                  sidebar={sidebarContact || sidebarAddress}\n                                >\n                                  <Content>\n                                    {data.partner && (\n                                      <>\n                                        <Row className=\"partner-header\">\n                                          <Col span={24}>\n                                            <Back>\n                                              <FormattedMessage id=\"partner.header.btn_back\" />\n                                            </Back>\n                                          </Col>\n                                          <Col span={24}>\n                                            <H1\n                                              css={{ flex: true, flexSize: 1 }}\n                                            >\n                                              {data.partner &&\n                                                (data.partner.name ||\n                                                  data.partner.brandName)}\n                                            </H1>\n                                          </Col>\n                                        </Row>\n                                        <Detail company={data.partner} />\n                                        {data.partner &&\n                                          data.partner.addresses &&\n                                          data.partner.addresses.rows && (\n                                            <Addresses\n                                              addresses={\n                                                data.partner.addresses.rows\n                                              }\n                                            />\n                                          )}\n\n                                        {data.partner &&\n                                          data.partner.contacts &&\n                                          data.partner.contacts.rows && (\n                                            <Contacts\n                                              contacts={\n                                                data.partner.contacts.rows\n                                              }\n                                            />\n                                          )}\n                                      </>\n                                    )}\n                                  </Content>\n                                </RightSideBar>\n                              );\n                            }}\n                          </EditAddressCtx.Consumer>\n                        </EditAddressCtx.Provider>\n                      );\n                    }}\n                  </EditContactsCtx.Consumer>\n                </EditContactsCtx.Provider>\n              </ContactsCtx.Provider>\n            );\n          }}\n        </Partner.Consumer>\n      </Partner.Provider>\n    );\n  }\n}\n\nexport default withRouter(PartnersComponent);\n","import gql from 'graphql-tag';\n\nimport Addresses from '../Addresses/fragments';\nimport Company from '../Company/fragments';\nimport Contacts from '../Contacts/fragments';\nimport Emails from '../Emails/fragments';\n\nexport const createPartner: any = gql`\n  ${Addresses.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n  ${Emails.fragment}\n\n  mutation createPartner($input: CompanyInput!) {\n    createPartner(input: $input) {\n      ${Company.query}\n    }\n  }\n`;\n\nexport const partners: any = gql`\n  ${Addresses.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n  ${Emails.fragment}\n\n  query partners($orderBy: PartnerOrder, $limit: Int, $offset: Int) {\n    partners(orderBy: $orderBy, limit: $limit, offset: $offset) {\n      total\n      rows {\n        ${Company.query}\n        invoicesSent\n        invoicesReceived\n      }\n    }\n  }\n`;\n\nexport const partner: any = gql`\n  ${Addresses.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n  ${Emails.fragment}\n\n  query partner($id: ID) {\n    partner(id: $id) {\n      ${Company.query}\n      invoicesSent\n      invoicesReceived\n    }\n  }\n`;\n","import * as React from 'react';\nimport { IInputPartner } from './types';\n\ninterface IPartnerInterface {\n  create: (obj: IInputPartner, partnersVariables: any) => any;\n  data?: any;\n}\n\nexport interface IPartnerContextInterface {\n  partner?: IPartnerInterface;\n}\n\nconst { Provider, Consumer } = React.createContext<IPartnerContextInterface>({\n  partner: {\n    create: () => {},\n    data: {},\n  },\n});\n\nexport { Provider, Consumer };\n","import gql from 'graphql-tag';\n\nimport Addresses from '../Addresses/fragments';\nimport Company from '../Company/fragments';\nimport Contacts from '../Contacts/fragments';\nimport Emails from '../Emails/fragments';\n\nexport const createPartner: any = gql`\n  ${Addresses.fragment}\n  ${Emails.fragment}\n  ${Contacts.fragment}\n\n  mutation createPartner($input: CompanyInput!) {\n    createPartner(input: $input) {\n      ${Company.input}\n    }\n  }\n`;\n\nexport const partners: any = gql`\n  ${Addresses.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n  ${Emails.fragment}\n\n  query partners($orderBy: PartnerOrder, $limit: Int, $offset: Int) {\n    partners(orderBy: $orderBy, limit: $limit, offset: $offset) {\n      total\n      rows {\n        ${Company.query}\n      }\n    }\n  }\n`;\n\nexport const partner: any = gql`\n  ${Addresses.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n  ${Emails.fragment}\n\n  query partner($id: ID) {\n    partner(id: $id) {\n      ${Company.query}\n    }\n  }\n`;\n","import { ApolloClient } from 'apollo-client';\nimport { IInputAddress } from 'context/Addresses/types';\nimport * as Alert from 'context/Alert';\nimport { ISearchParamType } from 'context/Common/types';\nimport { partner } from 'context/Partners/queries';\nimport * as User from 'context/User';\nimport * as React from 'react';\nimport { compose, graphql, withApollo } from 'react-apollo';\nimport { errorOrSuccess, mutate, request, updateStoreRows } from 'utils';\nimport { IPartnerContextInterface, Provider } from './context';\nimport { createPartner, partners } from './queries';\nimport { IInputPartner, IPartner } from './types';\n\ninterface IState extends IPartnerContextInterface {}\n\ninterface IProps extends Alert.InjectedProps, User.InjectedProps {\n  createPartner: any;\n  dataPartner: any;\n  limit: number;\n  offset: number;\n  children: React.ReactNode;\n  client: ApolloClient<any>;\n}\n\nclass PartnerContextProvider extends React.PureComponent<IProps, IState> {\n  state = {\n    partner: {\n      create: async (inputPartner: IInputPartner, partnersVariables: any) => {\n        const { dataPartner } = this.props;\n\n        let results;\n        const variables =\n          partnersVariables || (dataPartner && dataPartner.variables);\n\n        try {\n          results = await this.props.createPartner({\n            variables: { input: inputPartner },\n          });\n        } catch (e) {}\n\n        return results;\n      },\n      data: {},\n    },\n  };\n\n  render() {\n    const { dataPartner } = this.props;\n\n    return (\n      <Provider\n        value={{\n          partner: {\n            ...this.state.partner,\n            data: dataPartner,\n          },\n        }}\n      >\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n\nconst partnerHandler = {\n  options: (props: any) => {\n    return {\n      variables: {\n        id: props.id,\n      },\n    };\n  },\n  props: (props: any) => {\n    return {\n      dataPartner: props.data,\n    };\n  },\n  skip: (props: any) => typeof props.id === 'undefined',\n};\n\nexport default compose(\n  withApollo,\n  Alert.hoc(),\n  User.hoc(),\n  graphql(partner, partnerHandler),\n  graphql(createPartner, { name: 'createPartner' }),\n)(PartnerContextProvider);\n","import { Consumer, IPartnerContextInterface } from './context';\nimport hoc from './hoc';\nimport Provider from './provider';\n\nexport interface InjectedProps extends IPartnerContextInterface {}\n\nexport { Provider, Consumer, hoc };\n","import * as Addresses from 'context/Addresses';\nimport { IAddress } from 'context/Addresses/types';\nimport events, { EventEmitter } from 'events';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\n\nexport interface IEditAddressesContext {\n  editAddress?: {\n    done: () => void;\n    edit: (address?: IAddress) => void;\n    editing: boolean;\n    selectedAddress?: IAddress;\n  };\n}\n\nconst Context = React.createContext<IEditAddressesContext>({\n  editAddress: {\n    done: () => {},\n    edit: () => {},\n    editing: false,\n    selectedAddress: undefined,\n  },\n});\n\nconst Consumer = Context.Consumer;\n\ninterface IProps {}\n\ninterface IState extends IEditAddressesContext {}\n\nclass Provider extends React.PureComponent<IProps, IState> {\n  state = {\n    editAddress: {\n      done: () => {\n        this.setState({\n          editAddress: {\n            ...this.state.editAddress,\n            editing: false,\n            selectedAddress: undefined,\n          },\n        });\n      },\n      edit: (address?: IAddress) => {\n        this.setState({\n          editAddress: {\n            ...this.state.editAddress,\n            editing: true,\n            selectedAddress: address,\n          },\n        });\n      },\n      editing: false,\n      selectedAddress: undefined,\n    },\n  };\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Addresses.Provider>\n        <Context.Provider value={this.state}>\n          {this.props.children}\n        </Context.Provider>\n      </Addresses.Provider>\n    );\n  }\n}\n\nconst composedProvider = Provider;\n\nexport { composedProvider as Provider, Consumer };\n","import * as React from 'react';\nimport { wrapDisplayName } from 'recompose';\nimport { Consumer, IEditAddressesContext } from './context';\n\nconst withEditAddressesHoc = () => <P extends object>(\n  // Component: React.ComponentType<P & IEditAddressesContext>\n  Component: React.ComponentType<P>,\n) => {\n  type ResultProps = P & Partial<IEditAddressesContext>;\n\n  class WithEditAddressesHoc extends React.Component<ResultProps> {\n    render() {\n      return (\n        <Consumer>\n          {props => {\n            return <Component {...this.props} {...props} />;\n          }}\n        </Consumer>\n      );\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    (WithEditAddressesHoc as any).displayName = wrapDisplayName(\n      Component,\n      'withEditAddressesHoc',\n    );\n  }\n\n  return WithEditAddressesHoc;\n};\n\nexport default withEditAddressesHoc;\n","import { Consumer, IEditAddressesContext, Provider } from './context';\nimport hoc from './hoc';\n\nexport interface InjectedProps extends IEditAddressesContext {}\n\nexport { Provider, Consumer, hoc };\n","let legalForm: any;\n\nconst all = async () => {\n  if (!legalForm) {\n    const response = await fetch('/legal-form.json');\n    legalForm = await response.json();\n  }\n\n  return legalForm;\n};\n\nexport default {\n  all,\n};\n","import * as React from 'react';\nimport { IInputAddress } from './types';\n\ninterface IAddressesInterface {\n  create: (inputAddress: IInputAddress) => void;\n}\n\nexport interface IAddressesContextInterface {\n  address?: IAddressesInterface;\n}\n\nconst { Provider, Consumer } = React.createContext<IAddressesContextInterface>({\n  address: {\n    create: () => {},\n  },\n});\n\nexport { Provider, Consumer };\n","import * as React from 'react';\nimport { wrapDisplayName } from 'recompose';\nimport { Consumer, IAddressesContextInterface } from './context';\n\nconst withAddresses = () => <OriginalProps extends {}>(\n  Component: React.ComponentType<OriginalProps & IAddressesContextInterface>,\n) => {\n  type ResultProps = OriginalProps & IAddressesContextInterface;\n\n  class WithAddresses extends React.Component<ResultProps> {\n    render() {\n      return (\n        <Consumer>{props => <Component {...this.props} {...props} />}</Consumer>\n      );\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    (WithAddresses as any).displayName = wrapDisplayName(\n      Component,\n      'withAddresses',\n    );\n  }\n\n  return WithAddresses;\n};\n\nexport default withAddresses;\n","import gql from 'graphql-tag';\n\nimport fragments from './fragments';\n\nexport const createOrUpdateAddress: any = gql`\n  ${fragments.fragment}\n\n  mutation createOrUpdateAddress($input: AddressInput!) {\n    createOrUpdateAddress(input: $input) {\n      ${fragments.query}\n    }\n  }\n`;\n","import { ApolloClient } from 'apollo-client';\nimport * as Alert from 'context/Alert';\nimport * as User from 'context/User';\nimport * as React from 'react';\nimport { compose, graphql, withApollo } from 'react-apollo';\nimport {\n  errorOrSuccess,\n  mutate,\n  parseError,\n  request,\n  updateStoreRows,\n} from 'utils';\nimport { IAddressesContextInterface, Provider } from './context';\nimport { createOrUpdateAddress } from './queries';\nimport { IInputAddress } from './types';\n\ninterface IState extends IAddressesContextInterface {}\n\ninterface IProps extends Alert.InjectedProps, User.InjectedProps {\n  createOrUpdateAddress: any;\n  children: React.ReactNode;\n  client: ApolloClient<any>;\n}\n\nclass PartnersContextProvider extends React.PureComponent<IProps, IState> {\n  state = {\n    address: {\n      create: async (inputAddress: IInputAddress) => {\n        try {\n          const results = await this.props.createOrUpdateAddress({\n            variables: { input: inputAddress },\n          });\n          errorOrSuccess(\n            this.props.alert,\n            [],\n            [\n              inputAddress.id\n                ? 'addresses.form.success_updated'\n                : 'addresses.form.success_add',\n            ],\n          );\n        } catch (e) {\n          errorOrSuccess(this.props.alert, parseError(e));\n        }\n      },\n    },\n  };\n\n  render() {\n    return (\n      <Provider\n        value={{\n          address: {\n            ...this.state.address,\n          },\n        }}\n      >\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n\nexport default compose(\n  withApollo,\n  Alert.hoc(),\n  graphql(createOrUpdateAddress, { name: 'createOrUpdateAddress' }),\n  // graphql(updateAddress, { name: 'updateAddress' })\n)(PartnersContextProvider);\n","import { Consumer, IAddressesContextInterface } from './context';\nimport hoc from './hoc';\nimport Provider from './provider';\n\nexport interface InjectedProps extends IAddressesContextInterface {}\n\nexport { Provider, Consumer, hoc };\n","import { Col, Row } from 'antd';\nimport { Icon } from 'components/Assets';\nimport { IconValue } from 'components/Assets/Icon';\nimport { FooterAdd } from 'components/Button';\nimport { H3 } from 'components/Typo';\nimport { Shadow } from 'components/Wrapper';\nimport { IAddress } from 'context/Addresses/types';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport './Addresses.module.less';\nimport * as Context from './context';\n\ninterface IProps extends Context.InjectedProps {\n  addresses?: IAddress[];\n}\ninterface IState {}\n\nclass Addresses extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  render() {\n    const { addresses, editAddress } = this.props;\n    const edit = editAddress && editAddress.edit;\n\n    return (\n      <Shadow className=\"company-addresses\">\n        <Row>\n          <H3 className=\"uppercase\">\n            <FormattedMessage id=\"addresses.company.address_title\" />\n          </H3>\n        </Row>\n        <Row gutter={49}>\n          {addresses &&\n            addresses.map((address: IAddress, i: number) => (\n              <Col className=\"company-address-col\" key={`${i}`} span={8}>\n                <div className=\"company-address-row-title\">\n                  <FormattedMessage\n                    id=\"addresses.company.address_row_title\"\n                    values={{ count: i + 1 }}\n                  />\n                  <div\n                    onClick={edit && edit.bind(this, address)}\n                    className=\"company-address-row-edit\"\n                  >\n                    <Icon value={IconValue.Pencil} />\n                  </div>\n                </div>\n                <div className=\"company-address-row\">\n                  {address.address1 ? `${address.address1}` : ''}\n                </div>\n                <div className=\"company-address-row\">\n                  {address.address2 ? `${address.address2}` : ''}\n                </div>\n                <div className=\"company-address-row\">\n                  {address.zipcode ? `${address.zipcode}` : ''}\n                  {address.city ? `${address.city}` : ''}\n                </div>\n                <div className=\"company-address-row uppercase\">\n                  {address.country ? `${address.country}` : ''}\n                </div>\n                <div className=\"company-address-row\">\n                  {address.siret ? `${address.siret}` : ''}\n                </div>\n              </Col>\n            ))}\n        </Row>\n        <Row>\n          <FooterAdd onClick={edit && edit.bind(this, undefined)}>\n            <FormattedMessage id=\"addresses.form.btn_add\" />\n          </FooterAdd>\n        </Row>\n      </Shadow>\n    );\n  }\n}\n\nexport default Context.hoc()(Addresses);\n","import { Form } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { Submit, Text } from 'components/Form';\nimport * as Addresses from 'context/Addresses';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\nimport { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';\nimport * as Context from './context';\n\ninterface IProps\n  extends FormComponentProps,\n    InjectedIntlProps,\n    Addresses.InjectedProps,\n    Context.InjectedProps {\n  companyId: string;\n  onUpdate?: () => void;\n}\n\ninterface IState {}\n\nclass AddressForm extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  handleSubmit: (e: React.FormEvent) => void;\n\n  constructor(props: any) {\n    super(props);\n\n    this.handleSubmit = this.submit.bind(this);\n  }\n\n  submit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    this.props.form.validateFields(async (err, values) => {\n      if (!err) {\n        const { editAddress, companyId, address, onUpdate } = this.props;\n        const create = address && address.create;\n        const id =\n          editAddress &&\n          editAddress.selectedAddress &&\n          editAddress.selectedAddress.id;\n\n        values.zipcode = parseInt(values.zipcode, 10);\n\n        const updated = {\n          ...values,\n          companyId,\n          id,\n        };\n\n        if (create) {\n          await create(updated);\n        }\n        editAddress && editAddress.done();\n        onUpdate && onUpdate();\n      }\n    });\n  };\n\n  render() {\n    const { form, intl, editAddress } = this.props;\n    const defaultValues = editAddress && editAddress.selectedAddress;\n\n    return (\n      <Addresses.Provider>\n        <Addresses.Consumer>\n          {({ address }) => {\n            return (\n              <Form className=\"form-address\" onSubmit={this.handleSubmit}>\n                <Text\n                  id=\"address1\"\n                  defaultValue={defaultValues && defaultValues.address1}\n                  label={<FormattedMessage id=\"addresses.form.address1\" />}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'addresses.form.address1_error',\n                      }),\n                      required: false,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Text\n                  id=\"address2\"\n                  defaultValue={defaultValues && defaultValues.address2}\n                  label={<FormattedMessage id=\"addresses.form.address2\" />}\n                  form={form}\n                />\n                <Text\n                  id=\"zipcode\"\n                  defaultValue={defaultValues && defaultValues.zipcode}\n                  label={<FormattedMessage id=\"addresses.form.zipcode\" />}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'addresses.form.zipcode_error',\n                      }),\n                      required: false,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Text\n                  id=\"city\"\n                  defaultValue={defaultValues && defaultValues.city}\n                  label={<FormattedMessage id=\"addresses.form.city\" />}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'addresses.form.city_error',\n                      }),\n                      required: false,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Text\n                  id=\"country\"\n                  defaultValue={defaultValues && defaultValues.country}\n                  label={<FormattedMessage id=\"addresses.form.country\" />}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'addresses.form.country_error',\n                      }),\n                      required: false,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Text\n                  id=\"siret\"\n                  defaultValue={defaultValues && defaultValues.siret}\n                  label={<FormattedMessage id=\"addresses.form.siret\" />}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'addresses.form.siret_error',\n                      }),\n                      required: false,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Submit\n                  label={<FormattedMessage id=\"addresses.form.submit\" />}\n                />\n              </Form>\n            );\n          }}\n        </Addresses.Consumer>\n      </Addresses.Provider>\n    );\n  }\n}\n\nexport default compose(\n  Form.create({}),\n  injectIntl,\n  Context.hoc(),\n  Addresses.hoc(),\n)(AddressForm);\n","import { Col, Collapse, Row } from 'antd';\nimport { ICompany } from 'context/Company/types';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\nimport { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';\nimport { RouteComponentProps } from 'react-router';\nimport { toDisplayDate } from 'utils/common';\nimport legalForm from 'utils/legal-form';\nimport './Detail.module.less';\n\nconst Panel = Collapse.Panel;\n\ninterface IProps extends RouteComponentProps, InjectedIntlProps {\n  company: ICompany;\n}\n\ninterface IState {\n  legalForms: any;\n}\n\nclass Detail extends React.PureComponent<IProps, IState> {\n  state = {\n    legalForms: {},\n  };\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  async componentDidMount() {\n    const legalForms = await legalForm.all();\n    this.setState({ legalForms });\n  }\n\n  render() {\n    const { company } = this.props;\n    const { legalForms } = this.state;\n\n    return company ? (\n      <>\n        <Row gutter={33} type=\"flex\">\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.brandname\" />\n            </div>\n            <div className=\"company-infos-value\">\n              {company.name || company.brandName}\n            </div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.siren\" />\n            </div>\n            <div className=\"company-infos-value\">{company.siren}</div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.vatNumber\" />\n            </div>\n            <div className=\"company-infos-value\">{company.vatNumber}</div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.naf\" />\n            </div>\n            <div className=\"company-infos-value\">{company.naf}</div>\n          </Col>\n        </Row>\n        <Row gutter={33} type=\"flex\">\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.legal_form\" />\n            </div>\n            <div className=\"company-infos-value\">\n              {legalForms && (legalForms as any)[company.legalForm]}\n            </div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.capital\" />\n            </div>\n            <div className=\"company-infos-value\">{company.capital}</div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.incorporation_at\" />\n            </div>\n            <div className=\"company-infos-value\">\n              {toDisplayDate(company.incorporationAt)}\n            </div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.number_employees\" />\n            </div>\n            <div className=\"company-infos-value\">{company.numberEmployees}</div>\n          </Col>\n        </Row>\n      </>\n    ) : null;\n  }\n}\n\nexport default compose(injectIntl)(Detail);\n"],"sourceRoot":""}