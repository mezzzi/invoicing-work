{"version":3,"sources":["components/Company/Marketing.tsx","screens/Company/Infos.tsx","components/Addresses/context/context.tsx","components/Addresses/context/hoc.tsx","components/Addresses/context/index.tsx","utils/legal-form.ts","context/Addresses/context.ts","context/Addresses/hoc.tsx","context/Addresses/queries.ts","context/Addresses/provider.tsx","context/Addresses/index.tsx","components/Wrapper/Shadow.tsx","components/Wrapper/index.js","components/Addresses/index.tsx","components/Addresses/AddressForm.tsx","components/Company/Detail.tsx"],"names":["Marketing","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","submit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee2","e","wrap","_context2","prev","next","preventDefault","form","validateFields","_ref2","_callee","err","values","_this$props","company","update","_context","id","stop","_x2","_x3","apply","arguments","_x","onBlur","_callee3","fieldNames","_this$props2","_context3","getFieldsValue","_this$props3","react","es_form","className","onSubmit","row","Typo","index_es","gutter","col","span","Form","defaultValue","domainName","label","slogan","React","compose","injectIntl","create","Bank","legalForms","close","addressDone","legalForm","all","setState","_this2","user","me","data","currentCompany","addresses","rows","context","editAddress","Layout","closable","onClose","bind","done","sidebar","editing","AddressForm","onUpdate","refetch","companyId","type","icon","IconValue","Wallet","title","description","Detail","Company","Company_Marketing","Addresses","User","Context","edit","selectedAddress","undefined","Consumer","composedProvider","Provider","objectSpread","address","value","children","withEditAddressesHoc","Component","_React$Component","WithEditAddressesHoc","inherits","createClass","key","assign","__webpack_require__","d","__webpack_exports__","hoc","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","response","fetch","sent","json","abrupt","withAddresses","WithAddresses","createOrUpdateAddress","gql","_templateObject","fragments","fragment","query","PartnersContextProvider","_create","inputAddress","variables","input","errorOrSuccess","alert","t0","parseError","withApollo","Alert","graphql","name","provider","Shadow","concat","components_Wrapper_Shadow","react__WEBPACK_IMPORTED_MODULE_14__","components_Wrapper__WEBPACK_IMPORTED_MODULE_13__","antd_es_row__WEBPACK_IMPORTED_MODULE_3__","components_Typo__WEBPACK_IMPORTED_MODULE_12__","react_intl__WEBPACK_IMPORTED_MODULE_15__","map","i","antd_es_col__WEBPACK_IMPORTED_MODULE_1__","count","onClick","components_Assets__WEBPACK_IMPORTED_MODULE_9__","Pencil","address1","address2","zipcode","city","country","siret","components_Button__WEBPACK_IMPORTED_MODULE_11__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_5__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default","updated","parseInt","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_3__","handleSubmit","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_10__","intl","defaultValues","react__WEBPACK_IMPORTED_MODULE_13__","context_Addresses__WEBPACK_IMPORTED_MODULE_12__","_ref3","antd_es_form__WEBPACK_IMPORTED_MODULE_1__","components_Form__WEBPACK_IMPORTED_MODULE_11__","rules","message","formatMessage","required","antd_es_collapse__WEBPACK_IMPORTED_MODULE_12__","Panel","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_6__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_8__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_9__","antd_es_row__WEBPACK_IMPORTED_MODULE_1__","antd_es_col__WEBPACK_IMPORTED_MODULE_3__","brandName","siren","vatNumber","naf","capital","toDisplayDate","incorporationAt","numberEmployees"],"mappings":"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","file":"static/js/33.82ffcf0b.chunk.js","sourcesContent":["import { Col, Collapse, Form, Row } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { Text } from 'components/Form';\nimport { H3 } from 'components/Typo';\nimport { ICompany } from 'context/Company/types';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\nimport { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';\nimport './Marketing.module.less';\n\ninterface IProps extends FormComponentProps, InjectedIntlProps {\n  company: ICompany;\n  update?: (companyId: number, infoMarketing: any) => void;\n}\n\ninterface IState {}\n\nclass Marketing extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  async componentDidMount() {}\n\n  submit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    this.props.form.validateFields(async (err, values) => {\n      if (!err) {\n        const { company, update } = this.props;\n        if (update && company) {\n          await update(company.id, values);\n        }\n      }\n    });\n  };\n\n  onBlur = async () => {\n    const fieldNames = ['domainName', 'slogan'];\n    const values: any = this.props.form.getFieldsValue(fieldNames) as any;\n\n    const { company, update } = this.props;\n    if (update && company) {\n      await update(company.id, values);\n    }\n  };\n\n  render() {\n    const { company, update, form } = this.props;\n\n    return company ? (\n      <Form className=\"form-marketing\" onSubmit={this.submit}>\n        <Row>\n          <H3 className=\"uppercase\">\n            <FormattedMessage id=\"infos.company.marketing_title\" />\n          </H3>\n        </Row>\n        <Row gutter={33}>\n          <Col span={8}>\n            <Text\n              onBlur={this.onBlur}\n              id=\"domainName\"\n              defaultValue={company.domainName}\n              label={<FormattedMessage id=\"infos.company.marketing_domain\" />}\n              form={form}\n            />\n          </Col>\n          <Col span={8}>\n            <Text\n              onBlur={this.onBlur}\n              id=\"slogan\"\n              defaultValue={company.slogan}\n              label={<FormattedMessage id=\"infos.company.marketing_slogan\" />}\n              form={form}\n            />\n          </Col>\n        </Row>\n      </Form>\n    ) : null;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  Form.create({}),\n)(Marketing);\n","import { Col, Collapse, Form, Row } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport Addresses from 'components/Addresses';\nimport AddressForm from 'components/Addresses/AddressForm';\nimport * as EditAddressCtx from 'components/Addresses/context';\nimport { IconValue } from 'components/Assets/Icon';\nimport Detail from 'components/Company/Detail';\nimport Marketing from 'components/Company/Marketing';\nimport { Content, RightSideBar } from 'components/Layout';\nimport { Heading } from 'components/Typo';\nimport { IAddress } from 'context/Addresses/types';\nimport * as CompanyCtx from 'context/Company';\nimport { ICompany } from 'context/Company/types';\nimport * as User from 'context/User';\nimport { IUser } from 'context/User/types';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport { RouteComponentProps } from 'react-router';\nimport legalForm from 'utils/legal-form';\nimport './Infos.module.less';\n\ninterface IProps\n  extends RouteComponentProps,\n    FormComponentProps,\n    InjectedIntlProps,\n    User.InjectedProps {}\n\ninterface IState {\n  legalForms: any;\n}\n\nclass Bank extends React.PureComponent<IProps, IState> {\n  state = {\n    legalForms: {},\n  };\n\n  close = (addressDone?: () => void) => {\n    addressDone && addressDone();\n  };\n\n  async componentDidMount() {\n    const legalForms = await legalForm.all();\n    this.setState({ legalForms });\n  }\n\n  render() {\n    const { user } = this.props;\n    const me: IUser = user && user.data && user.data.me;\n\n    const currentCompany: ICompany = me && me.currentCompany;\n\n    const addresses: IAddress[] =\n      (currentCompany &&\n        currentCompany.addresses &&\n        currentCompany.addresses.rows) ||\n      [];\n\n    return (\n      <EditAddressCtx.Provider>\n        <EditAddressCtx.Consumer>\n          {({ editAddress }) => (\n            <RightSideBar\n              closable={true}\n              onClose={this.close.bind(null, editAddress && editAddress.done)}\n              sidebar={\n                editAddress &&\n                editAddress.editing && (\n                  <AddressForm\n                    onUpdate={user && user.data && user.data.refetch}\n                    companyId={currentCompany.id}\n                  />\n                )\n              }\n            >\n              <Content>\n                <Row type=\"flex\">\n                  <Heading\n                    icon={IconValue.Wallet}\n                    title={'infos.header.title'}\n                    description={'infos.header.description'}\n                  />\n                </Row>\n                <Detail company={currentCompany} />\n                {currentCompany && (\n                  <>\n                    <Row>\n                      <CompanyCtx.Provider>\n                        <CompanyCtx.Consumer>\n                          {({ company }) => (\n                            <Marketing\n                              company={currentCompany}\n                              update={company && company.create}\n                            />\n                          )}\n                        </CompanyCtx.Consumer>\n                      </CompanyCtx.Provider>\n                    </Row>\n                    <Row>\n                      <Addresses addresses={addresses} />\n                    </Row>\n                  </>\n                )}\n              </Content>\n            </RightSideBar>\n          )}\n        </EditAddressCtx.Consumer>\n      </EditAddressCtx.Provider>\n    );\n  }\n}\n\nexport default compose(\n  Form.create({}),\n  injectIntl,\n  User.hoc(),\n)(Bank);\n","import * as Addresses from 'context/Addresses';\nimport { IAddress } from 'context/Addresses/types';\nimport events, { EventEmitter } from 'events';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\n\nexport interface IEditAddressesContext {\n  editAddress?: {\n    done: () => void;\n    edit: (address?: IAddress) => void;\n    editing: boolean;\n    selectedAddress?: IAddress;\n  };\n}\n\nconst Context = React.createContext<IEditAddressesContext>({\n  editAddress: {\n    done: () => {},\n    edit: () => {},\n    editing: false,\n    selectedAddress: undefined,\n  },\n});\n\nconst Consumer = Context.Consumer;\n\ninterface IProps {}\n\ninterface IState extends IEditAddressesContext {}\n\nclass Provider extends React.PureComponent<IProps, IState> {\n  state = {\n    editAddress: {\n      done: () => {\n        this.setState({\n          editAddress: {\n            ...this.state.editAddress,\n            editing: false,\n            selectedAddress: undefined,\n          },\n        });\n      },\n      edit: (address?: IAddress) => {\n        this.setState({\n          editAddress: {\n            ...this.state.editAddress,\n            editing: true,\n            selectedAddress: address,\n          },\n        });\n      },\n      editing: false,\n      selectedAddress: undefined,\n    },\n  };\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Addresses.Provider>\n        <Context.Provider value={this.state}>\n          {this.props.children}\n        </Context.Provider>\n      </Addresses.Provider>\n    );\n  }\n}\n\nconst composedProvider = Provider;\n\nexport { composedProvider as Provider, Consumer };\n","import * as React from 'react';\nimport { wrapDisplayName } from 'recompose';\nimport { Consumer, IEditAddressesContext } from './context';\n\nconst withEditAddressesHoc = () => <P extends object>(\n  // Component: React.ComponentType<P & IEditAddressesContext>\n  Component: React.ComponentType<P>,\n) => {\n  type ResultProps = P & Partial<IEditAddressesContext>;\n\n  class WithEditAddressesHoc extends React.Component<ResultProps> {\n    render() {\n      return (\n        <Consumer>\n          {props => {\n            return <Component {...this.props} {...props} />;\n          }}\n        </Consumer>\n      );\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    (WithEditAddressesHoc as any).displayName = wrapDisplayName(\n      Component,\n      'withEditAddressesHoc',\n    );\n  }\n\n  return WithEditAddressesHoc;\n};\n\nexport default withEditAddressesHoc;\n","import { Consumer, IEditAddressesContext, Provider } from './context';\nimport hoc from './hoc';\n\nexport interface InjectedProps extends IEditAddressesContext {}\n\nexport { Provider, Consumer, hoc };\n","let legalForm: any;\n\nconst all = async () => {\n  if (!legalForm) {\n    const response = await fetch('/legal-form.json');\n    legalForm = await response.json();\n  }\n\n  return legalForm;\n};\n\nexport default {\n  all,\n};\n","import * as React from 'react';\nimport { IInputAddress } from './types';\n\ninterface IAddressesInterface {\n  create: (inputAddress: IInputAddress) => void;\n}\n\nexport interface IAddressesContextInterface {\n  address?: IAddressesInterface;\n}\n\nconst { Provider, Consumer } = React.createContext<IAddressesContextInterface>({\n  address: {\n    create: () => {},\n  },\n});\n\nexport { Provider, Consumer };\n","import * as React from 'react';\nimport { wrapDisplayName } from 'recompose';\nimport { Consumer, IAddressesContextInterface } from './context';\n\nconst withAddresses = () => <OriginalProps extends {}>(\n  Component: React.ComponentType<OriginalProps & IAddressesContextInterface>,\n) => {\n  type ResultProps = OriginalProps & IAddressesContextInterface;\n\n  class WithAddresses extends React.Component<ResultProps> {\n    render() {\n      return (\n        <Consumer>{props => <Component {...this.props} {...props} />}</Consumer>\n      );\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    (WithAddresses as any).displayName = wrapDisplayName(\n      Component,\n      'withAddresses',\n    );\n  }\n\n  return WithAddresses;\n};\n\nexport default withAddresses;\n","import gql from 'graphql-tag';\n\nimport fragments from './fragments';\n\nexport const createOrUpdateAddress: any = gql`\n  ${fragments.fragment}\n\n  mutation createOrUpdateAddress($input: AddressInput!) {\n    createOrUpdateAddress(input: $input) {\n      ${fragments.query}\n    }\n  }\n`;\n","import { ApolloClient } from 'apollo-client';\nimport * as Alert from 'context/Alert';\nimport * as User from 'context/User';\nimport * as React from 'react';\nimport { compose, graphql, withApollo } from 'react-apollo';\nimport {\n  errorOrSuccess,\n  mutate,\n  parseError,\n  request,\n  updateStoreRows,\n} from 'utils';\nimport { IAddressesContextInterface, Provider } from './context';\nimport { createOrUpdateAddress } from './queries';\nimport { IInputAddress } from './types';\n\ninterface IState extends IAddressesContextInterface {}\n\ninterface IProps extends Alert.InjectedProps, User.InjectedProps {\n  createOrUpdateAddress: any;\n  children: React.ReactNode;\n  client: ApolloClient<any>;\n}\n\nclass PartnersContextProvider extends React.PureComponent<IProps, IState> {\n  state = {\n    address: {\n      create: async (inputAddress: IInputAddress) => {\n        try {\n          const results = await this.props.createOrUpdateAddress({\n            variables: { input: inputAddress },\n          });\n          errorOrSuccess(\n            this.props.alert,\n            [],\n            [\n              inputAddress.id\n                ? 'addresses.form.success_updated'\n                : 'addresses.form.success_add',\n            ],\n          );\n        } catch (e) {\n          errorOrSuccess(this.props.alert, parseError(e));\n        }\n      },\n    },\n  };\n\n  render() {\n    return (\n      <Provider\n        value={{\n          address: {\n            ...this.state.address,\n          },\n        }}\n      >\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n\nexport default compose(\n  withApollo,\n  Alert.hoc(),\n  graphql(createOrUpdateAddress, { name: 'createOrUpdateAddress' }),\n  // graphql(updateAddress, { name: 'updateAddress' })\n)(PartnersContextProvider);\n","import { Consumer, IAddressesContextInterface } from './context';\nimport hoc from './hoc';\nimport Provider from './provider';\n\nexport interface InjectedProps extends IAddressesContextInterface {}\n\nexport { Provider, Consumer, hoc };\n","import * as React from 'react';\n\nimport './Shadow.css';\n\ninterface IProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst Shadow: React.FunctionComponent<IProps> = ({ children, className }) => (\n  <div className={`shadow-wrapper${className ? ` ${className}` : ''}`}>\n    {children}\n  </div>\n);\n\nexport default Shadow;\n","import Shadow from './Shadow';\n\nexport {\n  Shadow\n};\n","import { Col, Row } from 'antd';\nimport { Icon } from 'components/Assets';\nimport { IconValue } from 'components/Assets/Icon';\nimport { FooterAdd } from 'components/Button';\nimport { H3 } from 'components/Typo';\nimport { Shadow } from 'components/Wrapper';\nimport { IAddress } from 'context/Addresses/types';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport './Addresses.module.less';\nimport * as Context from './context';\n\ninterface IProps extends Context.InjectedProps {\n  addresses?: IAddress[];\n}\ninterface IState {}\n\nclass Addresses extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  render() {\n    const { addresses, editAddress } = this.props;\n    const edit = editAddress && editAddress.edit;\n\n    return (\n      <Shadow className=\"company-addresses\">\n        <Row>\n          <H3 className=\"uppercase\">\n            <FormattedMessage id=\"addresses.company.address_title\" />\n          </H3>\n        </Row>\n        <Row gutter={49}>\n          {addresses &&\n            addresses.map((address: IAddress, i: number) => (\n              <Col className=\"company-address-col\" key={`${i}`} span={8}>\n                <div className=\"company-address-row-title\">\n                  <FormattedMessage\n                    id=\"addresses.company.address_row_title\"\n                    values={{ count: i + 1 }}\n                  />\n                  <div\n                    onClick={edit && edit.bind(this, address)}\n                    className=\"company-address-row-edit\"\n                  >\n                    <Icon value={IconValue.Pencil} />\n                  </div>\n                </div>\n                <div className=\"company-address-row\">\n                  {address.address1 ? `${address.address1}` : ''}\n                </div>\n                <div className=\"company-address-row\">\n                  {address.address2 ? `${address.address2}` : ''}\n                </div>\n                <div className=\"company-address-row\">\n                  {address.zipcode ? `${address.zipcode}` : ''}\n                  {address.city ? `${address.city}` : ''}\n                </div>\n                <div className=\"company-address-row uppercase\">\n                  {address.country ? `${address.country}` : ''}\n                </div>\n                <div className=\"company-address-row\">\n                  {address.siret ? `${address.siret}` : ''}\n                </div>\n              </Col>\n            ))}\n        </Row>\n        <Row>\n          <FooterAdd onClick={edit && edit.bind(this, undefined)}>\n            <FormattedMessage id=\"addresses.form.btn_add\" />\n          </FooterAdd>\n        </Row>\n      </Shadow>\n    );\n  }\n}\n\nexport default Context.hoc()(Addresses);\n","import { Form } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { Submit, Text } from 'components/Form';\nimport * as Addresses from 'context/Addresses';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\nimport { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';\nimport * as Context from './context';\n\ninterface IProps\n  extends FormComponentProps,\n    InjectedIntlProps,\n    Addresses.InjectedProps,\n    Context.InjectedProps {\n  companyId: string;\n  onUpdate?: () => void;\n}\n\ninterface IState {}\n\nclass AddressForm extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  handleSubmit: (e: React.FormEvent) => void;\n\n  constructor(props: any) {\n    super(props);\n\n    this.handleSubmit = this.submit.bind(this);\n  }\n\n  submit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    this.props.form.validateFields(async (err, values) => {\n      if (!err) {\n        const { editAddress, companyId, address, onUpdate } = this.props;\n        const create = address && address.create;\n        const id =\n          editAddress &&\n          editAddress.selectedAddress &&\n          editAddress.selectedAddress.id;\n\n        values.zipcode = parseInt(values.zipcode, 10);\n\n        const updated = {\n          ...values,\n          companyId,\n          id,\n        };\n\n        if (create) {\n          await create(updated);\n        }\n        editAddress && editAddress.done();\n        onUpdate && onUpdate();\n      }\n    });\n  };\n\n  render() {\n    const { form, intl, editAddress } = this.props;\n    const defaultValues = editAddress && editAddress.selectedAddress;\n\n    return (\n      <Addresses.Provider>\n        <Addresses.Consumer>\n          {({ address }) => {\n            return (\n              <Form className=\"form-address\" onSubmit={this.handleSubmit}>\n                <Text\n                  id=\"address1\"\n                  defaultValue={defaultValues && defaultValues.address1}\n                  label={<FormattedMessage id=\"addresses.form.address1\" />}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'addresses.form.address1_error',\n                      }),\n                      required: false,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Text\n                  id=\"address2\"\n                  defaultValue={defaultValues && defaultValues.address2}\n                  label={<FormattedMessage id=\"addresses.form.address2\" />}\n                  form={form}\n                />\n                <Text\n                  id=\"zipcode\"\n                  defaultValue={defaultValues && defaultValues.zipcode}\n                  label={<FormattedMessage id=\"addresses.form.zipcode\" />}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'addresses.form.zipcode_error',\n                      }),\n                      required: false,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Text\n                  id=\"city\"\n                  defaultValue={defaultValues && defaultValues.city}\n                  label={<FormattedMessage id=\"addresses.form.city\" />}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'addresses.form.city_error',\n                      }),\n                      required: false,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Text\n                  id=\"country\"\n                  defaultValue={defaultValues && defaultValues.country}\n                  label={<FormattedMessage id=\"addresses.form.country\" />}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'addresses.form.country_error',\n                      }),\n                      required: false,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Text\n                  id=\"siret\"\n                  defaultValue={defaultValues && defaultValues.siret}\n                  label={<FormattedMessage id=\"addresses.form.siret\" />}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'addresses.form.siret_error',\n                      }),\n                      required: false,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Submit\n                  label={<FormattedMessage id=\"addresses.form.submit\" />}\n                />\n              </Form>\n            );\n          }}\n        </Addresses.Consumer>\n      </Addresses.Provider>\n    );\n  }\n}\n\nexport default compose(\n  Form.create({}),\n  injectIntl,\n  Context.hoc(),\n  Addresses.hoc(),\n)(AddressForm);\n","import { Col, Collapse, Row } from 'antd';\nimport { ICompany } from 'context/Company/types';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\nimport { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';\nimport { RouteComponentProps } from 'react-router';\nimport { toDisplayDate } from 'utils/common';\nimport legalForm from 'utils/legal-form';\nimport './Detail.module.less';\n\nconst Panel = Collapse.Panel;\n\ninterface IProps extends RouteComponentProps, InjectedIntlProps {\n  company: ICompany;\n}\n\ninterface IState {\n  legalForms: any;\n}\n\nclass Detail extends React.PureComponent<IProps, IState> {\n  state = {\n    legalForms: {},\n  };\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  async componentDidMount() {\n    const legalForms = await legalForm.all();\n    this.setState({ legalForms });\n  }\n\n  render() {\n    const { company } = this.props;\n    const { legalForms } = this.state;\n\n    return company ? (\n      <>\n        <Row gutter={33} type=\"flex\">\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.brandname\" />\n            </div>\n            <div className=\"company-infos-value\">\n              {company.name || company.brandName}\n            </div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.siren\" />\n            </div>\n            <div className=\"company-infos-value\">{company.siren}</div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.vatNumber\" />\n            </div>\n            <div className=\"company-infos-value\">{company.vatNumber}</div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.naf\" />\n            </div>\n            <div className=\"company-infos-value\">{company.naf}</div>\n          </Col>\n        </Row>\n        <Row gutter={33} type=\"flex\">\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.legal_form\" />\n            </div>\n            <div className=\"company-infos-value\">\n              {legalForms && (legalForms as any)[company.legalForm]}\n            </div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.capital\" />\n            </div>\n            <div className=\"company-infos-value\">{company.capital}</div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.incorporation_at\" />\n            </div>\n            <div className=\"company-infos-value\">\n              {toDisplayDate(company.incorporationAt)}\n            </div>\n          </Col>\n          <Col span={6}>\n            <div className=\"company-infos-subtitle\">\n              <FormattedMessage id=\"infos.company.number_employees\" />\n            </div>\n            <div className=\"company-infos-value\">{company.numberEmployees}</div>\n          </Col>\n        </Row>\n      </>\n    ) : null;\n  }\n}\n\nexport default compose(injectIntl)(Detail);\n"],"sourceRoot":""}