{"version":3,"sources":["screens/Kyc/2Company/Wrapper.tsx","screens/Kyc/2Company/index.js","context/Siren/context.ts","context/Siren/hoc.tsx","context/Siren/queries.ts","context/Siren/provider.tsx","context/Siren/index.tsx","screens/Kyc/2Company/context/context.tsx","screens/Kyc/2Company/context/hoc.tsx","screens/Kyc/2Company/context/index.tsx"],"names":["Form1","React","Promise","all","__webpack_require__","e","then","bind","Form2","Wrapper","react","Siren","context","Route","exact","path","component","withRouter","siren","complementaryInfos","_complementaryInfos","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","undefined","stop","apply","this","arguments","data","more","Provider","Consumer","withSiren","Component","_React$Component","WithSiren","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","value","_this","props","assign","searchCompanies","gql","_templateObject","Addresses","fragment","Emails","Contacts","Company","query","companyWithComplementaryInfos","_templateObject2","CompanyContextProvider","state","_ref","client","variables","sent","t0","_x","params","dataSiren","length","rows","fetchMore","updateQuery","_ref2","fetchMoreResult","objectSpread","concat","toConsumableArray","total","limit","offset","children","compose","withApollo","graphql","options","skip","d","__webpack_exports__","provider","hoc","Context","tempCompany","updateTempCompany","setState","withTempCompanyHoc","WithTempCompanyHoc","context_Provider"],"mappings":"sNAMMA,EAAQC,OAAW,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,IAAAD,EAAAC,EAAA,OAAAC,KAAAF,EAAAG,KAAA,cACzBC,EAAQP,OAAW,kBAAMG,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAKzBE,mLAEF,OACEC,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACE,EAAA,EAAD,KACEF,EAAA,cAACG,EAAA,EAAD,CAAUC,OAAK,EAACC,KAAK,eAAeC,UAAWhB,IAC/CU,EAAA,cAACG,EAAA,EAAD,CAAUE,KAAK,uBAAuBC,UAAWR,aANrCP,iBAaPgB,cAAWR,GCrBXA,oFCWgBR,gBAA4C,CACzEiB,MAAO,CACLC,mBAAkB,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAE,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,cAAYC,GAAZ,wBAAAJ,EAAAK,SAAAP,MAAF,yBAAAN,EAAAc,MAAAC,KAAAC,YAAA,GAClBC,UAAML,EACNM,KAAM,gBAJFC,aAAUC,kDCSHC,UApBG,kBAAM,SACtBC,GAgBA,OAfG,SAAAC,GAAA,SAAAC,IAAA,OAAAvB,OAAAwB,EAAA,EAAAxB,CAAAc,KAAAS,GAAAvB,OAAAyB,EAAA,EAAAzB,CAAAc,KAAAd,OAAA0B,EAAA,EAAA1B,CAAAuB,GAAAV,MAAAC,KAAAC,YAAA,OAAAf,OAAA2B,EAAA,EAAA3B,CAAAuB,EAAAD,GAAAtB,OAAA4B,EAAA,EAAA5B,CAAAuB,EAAA,EAAAM,IAAA,SAAAC,MAAA,WAIQ,IAAAC,EAAAjB,KACP,OACEzB,EAAA,cAAC8B,EAAD,KAAW,SAAAa,GAAK,OAAI3C,EAAA,cAACgC,EAADrB,OAAAiC,OAAA,GAAeF,EAAKC,MAAWA,UANtDT,EAAA,CAGqB3C,0rBCFnB,IAAMsD,EAAuBC,IAAHC,IAC7BC,IAAUC,SACVC,IAAOD,SACPE,IAASF,SACTG,IAAQH,SAMFG,IAAQC,OAMLC,EAAqCR,IAAHS,KCNzCC,6MACJC,MAAQ,CACNjD,MAAO,CACLC,mBAAkB,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAE,SAAAC,EAAOR,GAAP,IAAAkD,EAAA/B,EAAA,OAAAd,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEOsB,EAAKC,MAAMgB,OAAON,MAAM,CAC7CA,MAAOC,EACPM,UAAW,CAAEpD,WAJC,cAAAkD,EAAAxC,EAAA2C,KAERlC,EAFQ+B,EAER/B,KAFQT,EAAAG,OAAA,SAOTM,EAAK2B,+BAPI,cAAApC,EAAAC,KAAA,EAAAD,EAAA4C,GAAA5C,EAAA,SAAAA,EAAAG,OAAA,SAST,MATS,yBAAAH,EAAAK,SAAAP,EAAA,iBAAF,gBAAA+C,GAAA,OAAArD,EAAAc,MAAAC,KAAAC,YAAA,GAYlBC,UAAML,EACNM,KAAM,SAACoC,GAA8B,IAC3BC,EAAcvB,EAAKC,MAAnBsB,UACFC,EACJD,EAAUpB,gBAAgBsB,MAC1BF,EAAUpB,iBACVoB,EAAUpB,gBAAgBsB,MAC1BF,EAAUpB,gBAAgBsB,KAAKD,OAEjCD,GACEA,EAAUG,WACVH,EAAUG,UAAU,CAClBC,YAAa,SAAClD,EAADmD,GAAyC,IAA3BC,EAA2BD,EAA3BC,gBACzB,OAAKA,EAAgB1B,gBAId,CACLA,gBAAgBlC,OAAA6D,EAAA,EAAA7D,CAAA,GACXQ,EAAK0B,gBADK,CAEbsB,KAAI,GAAAM,OAAA9D,OAAA+D,EAAA,EAAA/D,CACCQ,EAAK0B,gBAAgBsB,MADtBxD,OAAA+D,EAAA,EAAA/D,CAEC4D,EAAgB1B,gBAAgBsB,OAErCQ,MAAOJ,EAAgB1B,gBAAgB8B,SAVlCxD,GAcXyC,UAAW,CACTgB,MAAO,GACPC,OAAQX,GAAU,gFAOrB,IACC1D,EAAUiB,KAAKgC,MAAfjD,MACAyD,EAAcxC,KAAKkB,MAAnBsB,UAER,OACEjE,EAAA,cAAC6B,EAAD,CACEY,MAAO,CACLjC,MAAMG,OAAA6D,EAAA,EAAA7D,CAAA,GACDH,EADA,CAEHmB,KAAMsC,MAITxC,KAAKkB,MAAMmC,iBAjEiBvF,iBAwFtBwF,oBACbC,aACAC,kBAAQpC,EAnBqB,CAC7BqC,QAAS,SAACvC,GACR,MAAO,CACLiB,UAAW,CACTP,MAAOV,EAAMF,SAInBE,MAAO,SAACA,GACN,MAAO,CACLsB,UAAWtB,EAAMhB,OAGrBwD,KAAM,SAACxC,GAAD,MACmB,qBAAhBA,EAAMF,OAAyC,KAAhBE,EAAMF,SAGjCsC,CAGbvB,GC5GF9D,EAAA0F,EAAAC,EAAA,sBAAAC,IAAA5F,EAAA0F,EAAAC,EAAA,sBAAAvD,IAAApC,EAAA0F,EAAAC,EAAA,sBAAAE,sFCQMC,EAAUjG,gBAAyC,CACvDkG,iBAAanE,EACboE,kBAAmB,eAGf5D,EAAW0D,EAAQ1D,SAOnBD,6MACJ4B,MAAQ,CACNgC,iBAAanE,EACboE,kBAAmB,SAACD,GAClB/C,EAAKiD,SAAS,CAAEF,0FAKlB,OACEzF,EAAA,cAACwF,EAAQ3D,SAAT,CAAkBY,MAAOhB,KAAKgC,OAC3BhC,KAAKkB,MAAMmC,iBAXGvF,iBCORqG,UAvBY,kBAAM,SAC/B5D,GAmBA,OAlBG,SAAAC,GAAA,SAAA4D,IAAA,OAAAlF,OAAAwB,EAAA,EAAAxB,CAAAc,KAAAoE,GAAAlF,OAAAyB,EAAA,EAAAzB,CAAAc,KAAAd,OAAA0B,EAAA,EAAA1B,CAAAkF,GAAArE,MAAAC,KAAAC,YAAA,OAAAf,OAAA2B,EAAA,EAAA3B,CAAAkF,EAAA5D,GAAAtB,OAAA4B,EAAA,EAAA5B,CAAAkF,EAAA,EAAArD,IAAA,SAAAC,MAAA,WAIQ,IAAAC,EAAAjB,KACP,OACEzB,EAAA,cAAC8B,EAAD,KAAW,SAAAa,GAAK,OAAI3C,EAAA,cAACgC,EAADrB,OAAAiC,OAAA,GAAeF,EAAKC,MAAWA,UANtDkD,EAAA,CAG8BtG,gBCTnCG,EAAA0F,EAAAC,EAAA,sBAAAS,IAAApG,EAAA0F,EAAAC,EAAA,sBAAAE","file":"static/js/111.4c6c357d.chunk.js","sourcesContent":["import { KycRoute } from 'components/Route';\nimport * as Siren from 'context/Siren';\nimport * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { Provider } from './context/index';\n\nconst Form1 = React.lazy(() => import('./Form1'));\nconst Form2 = React.lazy(() => import('./Form2'));\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {}\n\nclass Wrapper extends React.PureComponent<IProps, IState> {\n  render() {\n    return (\n      <Siren.Provider>\n        <Provider>\n          <KycRoute exact path=\"/kyc/company\" component={Form1} />\n          <KycRoute path=\"/kyc/company/address\" component={Form2} />\n        </Provider>\n      </Siren.Provider>\n    );\n  }\n}\n\nexport default withRouter(Wrapper);\n","import './Styles.module.less';\n\nimport Wrapper from './Wrapper';\n\nexport default Wrapper;\n","import { ICompanies, IInputCompany } from 'context/Company/types';\nimport * as React from 'react';\n\nimport { ISearchParamType } from '../Common/types';\n\ninterface ISirenInterface {\n  complementaryInfos: (siren: string) => Promise<any | undefined>;\n  data: any;\n  more: (params?: ISearchParamType) => void;\n}\n\nexport interface ISirenContextInterface {\n  siren?: ISirenInterface;\n}\n\nconst { Provider, Consumer } = React.createContext<ISirenContextInterface>({\n  siren: {\n    complementaryInfos: async () => undefined,\n    data: undefined,\n    more: () => {},\n  },\n});\n\nexport { Provider, Consumer };\n","import * as React from 'react';\nimport { wrapDisplayName } from 'recompose';\nimport { Consumer, ISirenContextInterface } from './context';\n\nconst withSiren = () => <OriginalProps extends {}>(\n  Component: React.ComponentType<OriginalProps & ISirenContextInterface>,\n) => {\n  type ResultProps = OriginalProps & ISirenContextInterface;\n\n  class WithSiren extends React.Component<ResultProps> {\n    render() {\n      return (\n        <Consumer>{props => <Component {...this.props} {...props} />}</Consumer>\n      );\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    (WithSiren as any).displayName = wrapDisplayName(Component, 'withSiren');\n  }\n\n  return WithSiren;\n};\n\nexport default withSiren;\n","import gql from 'graphql-tag';\n\nimport Addresses from '../Addresses/fragments';\nimport Company from '../Company/fragments';\nimport Contacts from '../Contacts/fragments';\nimport Emails from '../Emails/fragments';\n\nexport const searchCompanies: any = gql`\n  ${Addresses.fragment}\n  ${Emails.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n\n  query searchCompanies($query: String!, $limit: Int, $offset: Int) {\n    searchCompanies(query: $query, limit: $limit, offset: $offset) {\n      total\n      rows {\n        ${Company.query}\n      }\n    }\n  }\n`;\n\nexport const companyWithComplementaryInfos: any = gql`\n  query companyWithComplementaryInfos($siren: String!) {\n    companyWithComplementaryInfos(siren: $siren) {\n      capital\n      legalAnnualTurnOver\n      numberEmployees\n      legalNetIncomeRange\n      phone\n    }\n  }\n`;\n","import { ApolloClient } from 'apollo-client';\nimport { ISearchParamType } from 'context/Common/types';\nimport * as React from 'react';\nimport { compose, graphql, withApollo } from 'react-apollo';\nimport { ISirenContextInterface, Provider } from './context';\nimport { companyWithComplementaryInfos, searchCompanies } from './queries';\n\ninterface IState extends ISirenContextInterface {}\n\ninterface IProps {\n  dataSiren: any;\n  limit: number;\n  offset: number;\n  children: React.ReactNode;\n  client: ApolloClient<any>;\n}\n\nclass CompanyContextProvider extends React.PureComponent<IProps, IState> {\n  state = {\n    siren: {\n      complementaryInfos: async (siren: string) => {\n        try {\n          const { data } = await this.props.client.query({\n            query: companyWithComplementaryInfos,\n            variables: { siren },\n          });\n\n          return data.companyWithComplementaryInfos;\n        } catch (e) {\n          return null;\n        }\n      },\n      data: undefined,\n      more: (params?: ISearchParamType) => {\n        const { dataSiren } = this.props;\n        const length =\n          dataSiren.searchCompanies.rows &&\n          dataSiren.searchCompanies &&\n          dataSiren.searchCompanies.rows &&\n          dataSiren.searchCompanies.rows.length;\n\n        dataSiren &&\n          dataSiren.fetchMore &&\n          dataSiren.fetchMore({\n            updateQuery: (prev: any, { fetchMoreResult }: any) => {\n              if (!fetchMoreResult.searchCompanies) {\n                return prev;\n              }\n\n              return {\n                searchCompanies: {\n                  ...prev.searchCompanies,\n                  rows: [\n                    ...prev.searchCompanies.rows,\n                    ...fetchMoreResult.searchCompanies.rows,\n                  ],\n                  total: fetchMoreResult.searchCompanies.total,\n                },\n              };\n            },\n            variables: {\n              limit: 10,\n              offset: length || 0,\n            },\n          });\n      },\n    },\n  };\n\n  render() {\n    const { siren } = this.state;\n    const { dataSiren } = this.props;\n\n    return (\n      <Provider\n        value={{\n          siren: {\n            ...siren,\n            data: dataSiren,\n          },\n        }}\n      >\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n\nconst searchCompaniesHandler = {\n  options: (props: any) => {\n    return {\n      variables: {\n        query: props.value,\n      },\n    };\n  },\n  props: (props: any) => {\n    return {\n      dataSiren: props.data,\n    };\n  },\n  skip: (props: any) =>\n    typeof props.value === 'undefined' || props.value === '',\n};\n\nexport default compose(\n  withApollo,\n  graphql(searchCompanies, searchCompaniesHandler),\n)(CompanyContextProvider);\n","import { Consumer, ISirenContextInterface } from './context';\nimport hoc from './hoc';\nimport Provider from './provider';\n\nexport interface InjectedProps extends ISirenContextInterface {}\n\nexport { Provider, Consumer, hoc };\n","import { IInputCompany } from 'context/Company/types';\nimport * as React from 'react';\n\nexport interface ITempCompanyContext {\n  tempCompany?: IInputCompany;\n  updateTempCompany: (company?: IInputCompany) => void;\n}\n\nconst Context = React.createContext<ITempCompanyContext>({\n  tempCompany: undefined,\n  updateTempCompany: () => {},\n});\n\nconst Consumer = Context.Consumer;\n\ninterface IProps {\n  children: React.ReactNode;\n}\ninterface IState extends ITempCompanyContext {}\n\nclass Provider extends React.PureComponent<IProps, IState> {\n  state = {\n    tempCompany: undefined,\n    updateTempCompany: (tempCompany?: IInputCompany) => {\n      this.setState({ tempCompany });\n    },\n  };\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport { Provider, Consumer };\n","import * as React from 'react';\nimport { wrapDisplayName } from 'recompose';\nimport { Consumer, ITempCompanyContext } from './context';\n\nconst withTempCompanyHoc = () => <OriginalProps extends {}>(\n  Component: React.ComponentType<OriginalProps & ITempCompanyContext>,\n) => {\n  type ResultProps = OriginalProps & ITempCompanyContext;\n\n  class WithTempCompanyHoc extends React.Component<ResultProps> {\n    render() {\n      return (\n        <Consumer>{props => <Component {...this.props} {...props} />}</Consumer>\n      );\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    (WithTempCompanyHoc as any).displayName = wrapDisplayName(\n      Component,\n      'withTempCompanyHoc',\n    );\n  }\n\n  return WithTempCompanyHoc;\n};\n\nexport default withTempCompanyHoc;\n","import { Consumer, ITempCompanyContext, Provider } from './context';\nimport hoc from './hoc';\n\nexport interface InjectedProps extends ITempCompanyContext {}\n\nexport { Provider, Consumer, hoc };\n"],"sourceRoot":""}