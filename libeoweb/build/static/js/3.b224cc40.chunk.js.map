{"version":3,"sources":["components/Card/Card.tsx","components/Card/CondensedCard.tsx","components/Card/CardRow.tsx","components/Card/index.js","context/Contacts/context.ts","context/Contacts/hoc.tsx","context/Contacts/provider.tsx","context/Contacts/index.tsx","components/Wrapper/Shadow.tsx","components/Wrapper/index.js","components/Contacts/ContactSearch.tsx","components/Contacts/ContactForm.tsx","components/Contacts/Contacts.tsx","components/Contacts/index.js","components/Contacts/context/context.tsx","components/Contacts/context/hoc.tsx","components/Contacts/context/index.tsx"],"names":["Default","onRemove","e","stopPropagation","preventDefault","_this","props","_this$props","this","avatar","center","children","className","onClose","editable","onEdit","removable","shadow","title","primary","titleAlign","rest","Object","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_12__","antd_es_card__WEBPACK_IMPORTED_MODULE_1__","assign","concat","onClick","components_Assets__WEBPACK_IMPORTED_MODULE_10__","value","IconValue","Cross","Pencil","Trash","antd_es_avatar__WEBPACK_IMPORTED_MODULE_3__","React","components_Assets__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","components_Skeleton__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_intl__WEBPACK_IMPORTED_MODULE_3__","_Card__WEBPACK_IMPORTED_MODULE_4__","CondensedCard","_ref","description","icon","style","loading","color","Bloc","Boolean","id","rows","renderRow","react__WEBPACK_IMPORTED_MODULE_9__","antd_es_row__WEBPACK_IMPORTED_MODULE_1__","map","row","i","antd_es_col__WEBPACK_IMPORTED_MODULE_3__","key","_Card__WEBPACK_IMPORTED_MODULE_1__","d","__webpack_exports__","_CondensedCard__WEBPACK_IMPORTED_MODULE_2__","_CardRow__WEBPACK_IMPORTED_MODULE_3__","contact","create","_create","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","stop","apply","arguments","update","Provider","Consumer","withContacts","Component","_React$Component","WithContacts","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","react","ContactsContextProvider","state","inputContact","data","createContact","variables","input","sent","errorOrSuccess","alert","t0","parseError","_x","_update","_callee2","_context2","updateContact","_x2","_x3","objectSpread","compose","withApollo","Alert","graphql","name","provider","hoc","Shadow","components_Wrapper_Shadow","ContactSearch","call","submit","refetchPartner","form","validateFields","_ref2","err","values","editContact","onSubmit","newContact","savedContact","companyId","firstname","lastname","email","emails","_x4","_x5","handleSubmit","bind","assertThisInitialized","handleCancel","cancel","onCancel","_this2","_this$props2","intl","Contacts","_ref3","es_form","Form","defaultValue","label","index_es","rules","message","formatMessage","required","length","pattern","Button","type","BtnType","Primary","injectIntl","ContactForm","onUpdate","updated","emailId","selectedContact","done","defaultValues","Context","Addresses","contacts","edit","Wrapper","Typo","gutter","col","minWidth","marginBottom","span","Card","substring","undefined","Contacts_ContactSearch","Contacts_ContactForm","Contacts_Contacts","editing","composedProvider","setState","address","withEditContactHoc","WithEditContactHoc"],"mappings":"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","file":"static/js/3.b224cc40.chunk.js","sourcesContent":["import { Avatar, Card } from 'antd';\nimport { CardProps } from 'antd/lib/card';\nimport { Icon } from 'components/Assets';\nimport { IconValue } from 'components/Assets/Icon';\nimport * as React from 'react';\n\n/**\n * @props\n */\ninterface IProps extends CardProps {\n  center?: boolean;\n  avatar?: React.ReactNode | string;\n  onClose?: () => void;\n  editable?: boolean;\n  onEdit?: () => void;\n  removable?: boolean;\n  onRemove?: () => void;\n  shadow?: boolean;\n  primary?: boolean;\n  title?: React.ReactNode;\n  titleAlign?: 'left' | 'right';\n}\n\n/**\n * @state\n *\n * error\n */\ninterface IState {}\n\n/**\n * @class Submit\n *\n */\nclass Default extends React.PureComponent<IProps, IState> {\n  onRemove = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { onRemove } = this.props;\n    onRemove && onRemove();\n  };\n\n  render() {\n    const {\n      avatar,\n      center,\n      children,\n      className,\n      onClose,\n      editable,\n      onEdit,\n      removable,\n      shadow,\n      title,\n      primary,\n      titleAlign,\n      ...rest\n    } = this.props;\n\n    return (\n      <Card\n        className={`card-item${center ? ' center ' : ''}${\n          shadow ? ' shadow ' : ''\n        }${primary ? ' primary ' : ''}${className ? ` ${className}` : ''}`}\n        {...rest}\n      >\n        {onClose && (\n          <div onClick={onClose} className=\"card-close\">\n            <Icon value={IconValue.Cross} />\n          </div>\n        )}\n        {editable && (\n          <div onClick={onEdit} className=\"card-edit\">\n            <Icon value={IconValue.Pencil} />\n          </div>\n        )}\n        {removable && (\n          <div onClick={this.onRemove} className=\"card-remove\">\n            <Icon value={IconValue.Trash} />\n          </div>\n        )}\n        {avatar && <Avatar className=\"card-avatar\">{avatar}</Avatar>}\n        {title && (\n          <div className={`card-title${titleAlign ? ` ${titleAlign}` : ''}`}>\n            {title}\n          </div>\n        )}\n        <div className=\"card-children\">{children}</div>\n      </Card>\n    );\n  }\n}\n\nexport default Default;\n","import { Icon } from 'components/Assets';\nimport { IconValue } from 'components/Assets/Icon';\nimport Skeleton from 'components/Skeleton';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Card from './Card';\n\n/**\n * @props\n */\ninterface IProps {\n  center?: boolean;\n  className?: string;\n  title?: React.ReactNode;\n  description?: string;\n  color?: string;\n  icon?: IconValue;\n  loading?: boolean;\n  style?: React.CSSProperties;\n}\n\nconst CondensedCard: React.FunctionComponent<IProps> = ({\n  className,\n  center,\n  title,\n  description,\n  icon,\n  style,\n  loading,\n  color,\n}) => {\n  return (\n    <Card\n      style={style}\n      center={center}\n      className={`condensed-card${className ? ` ${className}` : ''}`}\n      shadow\n    >\n      <div className=\"condensed-card-left\">\n        <Skeleton.Bloc\n          loading={Boolean(loading)}\n          className=\"condensed-card-title\"\n        >\n          {title}\n        </Skeleton.Bloc>\n        {description && (\n          <Skeleton.Bloc\n            loading={Boolean(loading)}\n            className=\"condensed-card-description\"\n          >\n            <FormattedMessage id={description} />\n          </Skeleton.Bloc>\n        )}\n      </div>\n      <div className={`condensed-card-right${color ? ` ${color}` : ''}`}>\n        <Icon value={icon} />\n      </div>\n    </Card>\n  );\n};\n\nexport default CondensedCard;\n","import { Col, Row } from 'antd';\nimport * as React from 'react';\n\n/**\n * @props\n */\ninterface IProps {\n  className?: string;\n  title?: React.ReactNode | string;\n  rows?: React.ReactNode[];\n  renderRow?: (row: React.ReactNode) => React.ReactNode;\n}\n\n/**\n * @state\n *\n * error\n */\ninterface IState {}\n\n/**\n * @class Submit\n *\n */\nclass Default extends React.PureComponent<IProps, IState> {\n  render() {\n    const { className, title, rows, renderRow } = this.props;\n\n    return (\n      <Row className={`${className ? 'className ' : ''}`}>\n        <div className=\"card-row-title\">{title}</div>\n        {rows &&\n          rows.map((row, i) => (\n            <Col className=\"card-row-item\" key={`${i}`}>\n              {renderRow ? renderRow(row) : row}\n            </Col>\n          ))}\n      </Row>\n    );\n  }\n}\n\nexport default Default;\n","import './Styles.module.less';\n\nimport Card from './Card';\nimport CondensedCard from './CondensedCard';\nimport CardRow from './CardRow';\n\nexport {\n  Card,\n  CardRow,\n  CondensedCard\n};\n","import * as React from 'react';\nimport { IContact, IInputContact } from './types';\n\ninterface IContactsInterface {\n  create: (inputContact: IInputContact) => Promise<IContact | null>;\n  update: (id: string, inputContact: IInputContact) => void;\n}\n\nexport interface IContactsContextInterface {\n  contact?: IContactsInterface;\n}\n\nconst { Provider, Consumer } = React.createContext<IContactsContextInterface>({\n  contact: {\n    create: async () => null,\n    update: () => {},\n  },\n});\n\nexport { Provider, Consumer };\n","import * as React from 'react';\nimport { wrapDisplayName } from 'recompose';\nimport { Consumer, IContactsContextInterface } from './context';\n\nconst withContacts = () => <OriginalProps extends {}>(\n  Component: React.ComponentType<OriginalProps & IContactsContextInterface>,\n) => {\n  type ResultProps = OriginalProps & IContactsContextInterface;\n\n  class WithContacts extends React.Component<ResultProps> {\n    render() {\n      return (\n        <Consumer>{props => <Component {...this.props} {...props} />}</Consumer>\n      );\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    (WithContacts as any).displayName = wrapDisplayName(\n      Component,\n      'withContacts',\n    );\n  }\n\n  return WithContacts;\n};\n\nexport default withContacts;\n","import { ApolloClient } from 'apollo-client';\nimport * as Alert from 'context/Alert';\nimport * as User from 'context/User';\nimport * as React from 'react';\nimport { compose, graphql, withApollo } from 'react-apollo';\nimport {\n  errorOrSuccess,\n  mutate,\n  parseError,\n  request,\n  updateStoreRows,\n} from 'utils';\nimport { IContactsContextInterface, Provider } from './context';\nimport { createContact, updateContact } from './queries';\nimport { IInputContact } from './types';\n\ninterface IState extends IContactsContextInterface {}\n\ninterface IProps extends Alert.InjectedProps, User.InjectedProps {\n  createContact: any;\n  updateContact: any;\n  children: React.ReactNode;\n  client: ApolloClient<any>;\n}\n\nclass ContactsContextProvider extends React.PureComponent<IProps, IState> {\n  state = {\n    contact: {\n      create: async (inputContact: IInputContact) => {\n        try {\n          const { data } = await this.props.createContact({\n            variables: { input: inputContact },\n          });\n          errorOrSuccess(\n            this.props.alert,\n            [],\n            ['partners.contact.success_add'],\n          );\n          return data.createContact;\n        } catch (e) {\n          errorOrSuccess(this.props.alert, parseError(e));\n        }\n      },\n      update: async (id: string, inputContact: IInputContact) => {\n        try {\n          const results = await this.props.updateContact({\n            variables: { id, input: inputContact },\n          });\n          errorOrSuccess(\n            this.props.alert,\n            [],\n            ['partners.contact.success_update'],\n          );\n        } catch (e) {\n          errorOrSuccess(this.props.alert, parseError(e));\n        }\n      },\n    },\n  };\n\n  render() {\n    return (\n      <Provider\n        value={{\n          contact: {\n            ...this.state.contact,\n          },\n        }}\n      >\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n\nexport default compose(\n  withApollo,\n  Alert.hoc(),\n  graphql(createContact, { name: 'createContact' }),\n  graphql(updateContact, { name: 'updateContact' }),\n)(ContactsContextProvider);\n","import { Consumer, IContactsContextInterface } from './context';\nimport hoc from './hoc';\nimport Provider from './provider';\n\nexport interface InjectedProps extends IContactsContextInterface {}\n\nexport { Provider, Consumer, hoc };\n","import * as React from 'react';\n\nimport './Shadow.css';\n\ninterface IProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst Shadow: React.FunctionComponent<IProps> = ({ children, className }) => (\n  <div className={`shadow-wrapper${className ? ` ${className}` : ''}`}>\n    {children}\n  </div>\n);\n\nexport default Shadow;\n","import Shadow from './Shadow';\n\nexport {\n  Shadow\n};\n","import { Form } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { BtnType, Button } from 'components/Button';\nimport { Email, Hidden, Submit, Text } from 'components/Form';\nimport * as Contacts from 'context/Contacts';\nimport { IContact, IInputContact } from 'context/Contacts/types';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\nimport { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';\n\ninterface IProps extends FormComponentProps, InjectedIntlProps {\n  refetchPartner: () => void;\n  onSubmit?: (contact: any) => void;\n  onCancel?: () => void;\n  companyId?: number;\n  editContact?: IContact;\n}\n\ninterface IState {}\n\nclass ContactSearch extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  handleSubmit: (\n    contact: any,\n    refetchPartner: () => void,\n    e: React.FormEvent,\n  ) => void;\n  handleCancel: () => void;\n\n  constructor(props: any) {\n    super(props);\n\n    this.handleSubmit = this.submit.bind(this);\n    this.handleCancel = this.cancel.bind(this);\n  }\n\n  cancel() {\n    this.props.onCancel && this.props.onCancel();\n  }\n\n  submit = async (\n    contact: any,\n    refetchPartner: () => void,\n    e: React.FormEvent,\n  ) => {\n    e.preventDefault();\n    this.props.form.validateFields(async (err, values) => {\n      if (!err) {\n        const { editContact, companyId, onSubmit } = this.props;\n        const newContact: IInputContact = {\n          // companyId,\n          firstname: values.firstname,\n          lastname: values.lastname,\n        };\n        if (values.email) {\n          let id;\n\n          if (\n            editContact &&\n            editContact.emails &&\n            editContact.emails.rows &&\n            editContact.emails.rows[0] &&\n            typeof editContact.emails.rows[0].id !== 'undefined'\n          ) {\n            id = editContact.emails.rows[0].id;\n          }\n\n          newContact.emails = [{ email: values.email, id }];\n        }\n\n        if (editContact) {\n          if (contact && contact.create) {\n            contact.update(values.id, newContact);\n          }\n          onSubmit && onSubmit(contact);\n        } else {\n          if (contact && contact.create) {\n            const savedContact: IContact = await contact.create(newContact);\n            refetchPartner();\n            onSubmit && onSubmit(savedContact);\n          }\n        }\n      }\n    });\n  };\n\n  render() {\n    const { form, intl, editContact, refetchPartner } = this.props;\n    return (\n      <Contacts.Provider>\n        <Contacts.Consumer>\n          {({ contact }) => {\n            return (\n              <Form className=\"search-contact\">\n                <Hidden\n                  id=\"id\"\n                  defaultValue={editContact ? editContact.id : ''}\n                  form={form}\n                />\n                <Text\n                  id=\"firstname\"\n                  label={<FormattedMessage id=\"partners.contact.firstname\" />}\n                  defaultValue={editContact ? editContact.firstname : ''}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'partners.contact.firstname_error',\n                      }),\n                      required: true,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Text\n                  id=\"lastname\"\n                  label={<FormattedMessage id=\"partners.contact.lastname\" />}\n                  defaultValue={editContact ? editContact.lastname : ''}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'partners.contact.lastname_error',\n                      }),\n                      required: true,\n                    },\n                  ]}\n                  form={form}\n                />\n                <Email\n                  id=\"email\"\n                  defaultValue={\n                    editContact &&\n                    editContact.emails &&\n                    editContact.emails.rows &&\n                    editContact.emails.rows.length > 0\n                      ? editContact.emails.rows[0].email\n                      : ''\n                  }\n                  label={<FormattedMessage id=\"partners.contact.email\" />}\n                  rules={[\n                    {\n                      message: intl.formatMessage({\n                        id: 'partners.contact.email_error',\n                      }),\n                      pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                      required: true,\n                    },\n                  ]}\n                  form={form}\n                />\n                <div className=\"contact-actions\">\n                  <Button type={BtnType.Default} onClick={this.handleCancel}>\n                    <FormattedMessage id=\"partners.contact.cancel\" />\n                  </Button>\n                  <Button\n                    type={BtnType.Primary}\n                    onClick={this.handleSubmit.bind(\n                      null,\n                      contact,\n                      refetchPartner,\n                    )}\n                  >\n                    <FormattedMessage id=\"partners.contact.submit\" />\n                  </Button>\n                </div>\n              </Form>\n            );\n          }}\n        </Contacts.Consumer>\n      </Contacts.Provider>\n    );\n  }\n}\n\nexport default compose(\n  Form.create({}),\n  injectIntl,\n)(ContactSearch);\n","import { Form } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { Email, Submit, Text } from 'components/Form';\nimport * as Contacts from 'context/Contacts';\nimport { IInputContact } from 'context/Contacts/types';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\nimport { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';\nimport * as Context from './context';\n\ninterface IProps\n  extends FormComponentProps,\n    InjectedIntlProps,\n    Contacts.InjectedProps,\n    Context.InjectedProps {\n  companyId: string;\n  onUpdate?: () => void;\n}\n\ninterface IState {}\n\nclass ContactForm extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  handleSubmit: (e: React.FormEvent) => void;\n\n  constructor(props: any) {\n    super(props);\n\n    this.handleSubmit = this.submit.bind(this);\n  }\n\n  submit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    this.props.form.validateFields(async (err, values) => {\n      if (!err) {\n        const { editContact, companyId, contact, onUpdate } = this.props;\n        const create = contact && contact.create;\n        const update = contact && contact.update;\n        const id =\n          editContact &&\n          editContact.selectedContact &&\n          editContact.selectedContact.id;\n\n        const email = values.email;\n        delete values.email;\n\n        const updated = {\n          ...values,\n          companyId,\n        };\n\n        if (email) {\n          let emailId;\n\n          if (\n            editContact &&\n            editContact.selectedContact &&\n            editContact.selectedContact.emails &&\n            editContact.selectedContact.emails.rows &&\n            editContact.selectedContact.emails.rows[0] &&\n            typeof editContact.selectedContact.emails.rows[0].id !== 'undefined'\n          ) {\n            emailId = editContact.selectedContact.emails.rows[0].id;\n          }\n\n          updated.emails = [{ email, id: emailId }];\n        }\n\n        if (update && id) {\n          await update(id, updated);\n        } else if (create) {\n          await create(updated);\n        }\n        editContact && editContact.done();\n        onUpdate && onUpdate();\n      }\n    });\n  };\n\n  render() {\n    const { form, intl, editContact } = this.props;\n    const defaultValues = editContact && editContact.selectedContact;\n\n    return (\n      <Form className=\"form-address\" onSubmit={this.handleSubmit}>\n        <Text\n          id=\"firstname\"\n          label={<FormattedMessage id=\"partners.contact.firstname\" />}\n          defaultValue={defaultValues ? defaultValues.firstname : ''}\n          rules={[\n            {\n              message: intl.formatMessage({\n                id: 'partners.contact.firstname_error',\n              }),\n              required: true,\n            },\n          ]}\n          form={form}\n        />\n        <Text\n          id=\"lastname\"\n          label={<FormattedMessage id=\"partners.contact.lastname\" />}\n          defaultValue={defaultValues ? defaultValues.lastname : ''}\n          rules={[\n            {\n              message: intl.formatMessage({\n                id: 'partners.contact.lastname_error',\n              }),\n              required: true,\n            },\n          ]}\n          form={form}\n        />\n        <Email\n          id=\"email\"\n          defaultValue={\n            defaultValues &&\n            defaultValues.emails &&\n            defaultValues.emails.rows &&\n            defaultValues.emails.rows.length > 0\n              ? defaultValues.emails.rows[0].email\n              : ''\n          }\n          label={<FormattedMessage id=\"partners.contact.email\" />}\n          rules={[\n            {\n              message: intl.formatMessage({\n                id: 'partners.contact.email_error',\n              }),\n              pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n              required: true,\n            },\n          ]}\n          form={form}\n        />\n        <Submit label={<FormattedMessage id=\"addresses.form.submit\" />} />\n      </Form>\n    );\n  }\n}\n\nexport default compose(\n  Form.create({}),\n  injectIntl,\n  Context.hoc(),\n  Contacts.hoc(),\n)(ContactForm);\n","import { Col, Row } from 'antd';\nimport { FooterAdd } from 'components/Button';\nimport { Card, CardRow } from 'components/Card';\nimport { H3 } from 'components/Typo';\nimport { Shadow } from 'components/Wrapper';\nimport { IContact } from 'context/Contacts/types';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport * as Context from './context';\n\ninterface IProps extends Context.InjectedProps {\n  contacts?: IContact[];\n}\ninterface IState {}\n\nclass Addresses extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  render() {\n    const { contacts, editContact } = this.props;\n    const edit = editContact && editContact.edit;\n\n    return (\n      <Shadow className=\"company-contacts\">\n        <Row>\n          <H3 className=\"uppercase\">\n            <FormattedMessage id=\"contacts.form.contacts_title\" />\n          </H3>\n        </Row>\n        <Row gutter={49}>\n          {contacts &&\n            contacts.map((contact: IContact, i: number) => (\n              <Col\n                style={{ minWidth: '200px', marginBottom: '28px' }}\n                key={`${i}`}\n                span={8}\n              >\n                <Card\n                  onEdit={edit && edit.bind(this, contact)}\n                  editable\n                  shadow\n                  avatar={`${contact.firstname &&\n                    contact.firstname.substring(0, 1)}${contact.lastname &&\n                    contact.lastname.substring(0, 1)}`}\n                  title={`${contact.firstname ? `${contact.firstname} ` : ''}${\n                    contact.lastname ? `${contact.lastname} ` : ''\n                  }`}\n                >\n                  {contact.emails &&\n                    contact.emails &&\n                    contact.emails &&\n                    contact.emails.rows &&\n                    contact.emails.rows.length > 0 && (\n                      <CardRow\n                        title={<FormattedMessage id=\"contacts.card.email\" />}\n                        rows={contact.emails.rows.map(row => row.email)}\n                      />\n                    )}\n                </Card>\n              </Col>\n            ))}\n        </Row>\n        <Row>\n          <FooterAdd onClick={edit && edit.bind(this, undefined)}>\n            <FormattedMessage id=\"contacts.form.btn_add\" />\n          </FooterAdd>\n        </Row>\n      </Shadow>\n    );\n  }\n}\n\nexport default Context.hoc()(Addresses);\n","import './Styles.module.less';\n\nimport ContactSearch from './ContactSearch';\nimport ContactForm from './ContactForm';\nimport Contacts from './Contacts';\n\nexport {\n  ContactSearch,\n  ContactForm,\n  Contacts\n};\n","import * as Contacts from 'context/Contacts';\nimport { IContact } from 'context/Contacts/types';\nimport * as React from 'react';\n\nexport interface IEditContactContext {\n  editContact?: {\n    done: () => void;\n    edit: (contacts?: IContact) => void;\n    editing: boolean;\n    selectedContact?: IContact;\n  };\n}\n\nconst Context = React.createContext<IEditContactContext>({\n  editContact: {\n    done: () => {},\n    edit: () => {},\n    editing: false,\n    selectedContact: undefined,\n  },\n});\n\nconst Consumer = Context.Consumer;\n\ninterface IProps {}\n\ninterface IState extends IEditContactContext {}\n\nclass Provider extends React.PureComponent<IProps, IState> {\n  state = {\n    editContact: {\n      done: () => {\n        this.setState({\n          editContact: {\n            ...this.state.editContact,\n            editing: false,\n            selectedContact: undefined,\n          },\n        });\n      },\n      edit: (address?: IContact) => {\n        this.setState({\n          editContact: {\n            ...this.state.editContact,\n            editing: true,\n            selectedContact: address,\n          },\n        });\n      },\n      editing: false,\n      selectedContact: undefined,\n    },\n  };\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Contacts.Provider>\n        <Context.Provider value={this.state}>\n          {this.props.children}\n        </Context.Provider>\n      </Contacts.Provider>\n    );\n  }\n}\n\nconst composedProvider = Provider;\n\nexport { composedProvider as Provider, Consumer };\n","import * as React from 'react';\nimport { wrapDisplayName } from 'recompose';\nimport { Consumer, IEditContactContext } from './context';\n\nconst withEditContactHoc = () => <P extends object>(\n  // Component: React.ComponentType<P & IEditContactContext>\n  Component: React.ComponentType<P>,\n) => {\n  type ResultProps = P & Partial<IEditContactContext>;\n\n  class WithEditContactHoc extends React.Component<ResultProps> {\n    render() {\n      return (\n        <Consumer>\n          {props => {\n            return <Component {...this.props} {...props} />;\n          }}\n        </Consumer>\n      );\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    (WithEditContactHoc as any).displayName = wrapDisplayName(\n      Component,\n      'withEditContactHoc',\n    );\n  }\n\n  return WithEditContactHoc;\n};\n\nexport default withEditContactHoc;\n","import { Consumer, IEditContactContext, Provider } from './context';\nimport hoc from './hoc';\n\nexport interface InjectedProps extends IEditContactContext {}\n\nexport { Provider, Consumer, hoc };\n"],"sourceRoot":""}