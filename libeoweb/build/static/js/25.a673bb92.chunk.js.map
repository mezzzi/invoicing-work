{"version":3,"sources":["components/Popin/Popin.tsx","screens/Network/Header.tsx","screens/Network/index.tsx","context/Partners/queries.ts","context/Partner/context.ts","context/Partner/queries.ts","context/Partner/provider.tsx","context/Partner/index.tsx","context/Siren/context.ts","context/Siren/hoc.tsx","context/Siren/queries.ts","context/Siren/provider.tsx","context/Siren/index.tsx","context/Partners/context.ts","context/Partners/hoc.tsx","context/Partners/provider.tsx","context/Partners/index.tsx"],"names":["Cross","cross","Default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClose","close","bind","assertThisInitialized","onClose","_this$props","children","rest","objectWithoutProperties","react","modal","assign","closable","onClick","className","color","React","NetworkHeader","state","popinVisible","value","handleValueChange","valueChange","handleSelect","select","handleCloseSearch","closeSearch","handleOpenSearch","openSearch","setState","create","item","partners","data","variables","refetch","_this2","total","Partner","_ref","partner","row","type","Typo","button","descriptionVariables","count","description","title","Popin","onCancel","visible","footer","Search","placeholder","form","onSelect","compose","es_form","Partners","Network","more","asyncToGenerator","regenerator_default","a","mark","_callee","fetchMore","length","wrap","_context","prev","next","updateQuery","_ref2","fetchMoreResult","objectSpread","rows","concat","toConsumableArray","limit","offset","stop","_x","_x2","_x3","apply","arguments","handleWrapperRef","setWrapperRef","node","wrapperRef","dataPartners","hasMore","components_Infinity","loadMore","Layout","Header","gutter","map","i","concatenedAddress","addresses","address","address1","zipcode","city","country","numberOfContacts","contacts","col","key","span","Link","to","id","Card","center","avatar","CompanyAvatar","company","style","marginBottom","minHeight","shadow","name","invoicesSent","invoicesReceived","index_es","align","values","gql","_templateObject","Addresses","fragment","Contacts","Company","Emails","query","_templateObject2","_templateObject3","Provider","Consumer","createPartner","input","PartnerContextProvider","_create","inputPartner","partnersVariables","dataPartner","results","sent","t0","abrupt","withApollo","Alert","User","graphql","options","skip","__webpack_require__","d","__webpack_exports__","provider","siren","complementaryInfos","_complementaryInfos","undefined","withSiren","Component","_React$Component","WithSiren","inherits","createClass","searchCompanies","companyWithComplementaryInfos","CompanyContextProvider","client","params","dataSiren","hoc","withPartners","WithPartners","PartnersContextProvider","fetchPolicy"],"mappings":"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","file":"static/js/25.a673bb92.chunk.js","sourcesContent":["import { Modal } from 'antd';\nimport { ModalProps } from 'antd/lib/modal';\nimport * as React from 'react';\n\nimport cross from '-!svg-react-loader!assets/icons/cross.svg';\nconst Cross: any = cross;\n\n/**\n * @props\n */\ninterface IProps extends ModalProps {\n  onClose?: () => void;\n}\n\n/**\n * @state\n *\n * error\n */\ninterface IState {}\n\n/**\n * @class Submit\n *\n */\nclass Default extends React.PureComponent<IProps, IState> {\n  handleClose: () => void;\n  constructor(props: any) {\n    super(props);\n\n    this.handleClose = this.close.bind(this);\n  }\n\n  close() {\n    const { onClose } = this.props;\n    onClose && onClose();\n  }\n\n  render() {\n    const { children, onClose, ...rest } = this.props;\n\n    return (\n      <Modal closable={false} {...rest}>\n        <>\n          <div onClick={this.handleClose} className=\"close-popin-btn\">\n            <Cross color=\"white\" className=\"close-popin-icon\" />\n          </div>\n          {children}\n        </>\n      </Modal>\n    );\n  }\n}\n\nexport default Default;\n","import { Form } from 'antd';\nimport { Row } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { Popin } from 'components/Popin';\nimport { AutocompleteSiren } from 'components/Search';\nimport { Heading } from 'components/Typo';\nimport { IInputCompany } from 'context/Company/types';\nimport * as Partner from 'context/Partner';\nimport { IInputPartner } from 'context/Partner/types';\nimport * as Partners from 'context/Partners';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\n\ninterface IProps extends Partners.InjectedProps, FormComponentProps {\n  total: number;\n}\n\ninterface IState {\n  popinVisible: boolean;\n  value: string;\n}\n\nclass NetworkHeader extends React.PureComponent<IProps, IState> {\n  state = {\n    popinVisible: false,\n    value: '',\n  };\n\n  handleSelect: (create: any, item: IInputCompany) => void;\n  handleCloseSearch: () => void;\n  handleOpenSearch: () => void;\n  handleValueChange: (value: string) => void;\n\n  constructor(props: any) {\n    super(props);\n\n    this.handleValueChange = this.valueChange.bind(this);\n    this.handleSelect = this.select.bind(this);\n    this.handleCloseSearch = this.closeSearch.bind(this);\n    this.handleOpenSearch = this.openSearch.bind(this);\n  }\n\n  valueChange(value: string) {\n    this.setState({ value });\n  }\n\n  async select(create: any, item: IInputCompany) {\n    const { partners } = this.props;\n    await create(item as IInputPartner, partners && partners.data.variables);\n\n    if (partners && partners.data && partners.data) {\n      await partners.data.refetch(partners && partners.data.variables);\n    }\n    this.setState({ popinVisible: false });\n  }\n\n  closeSearch() {\n    this.setState({ popinVisible: false });\n  }\n\n  openSearch() {\n    this.setState({ popinVisible: true });\n  }\n\n  render() {\n    const { total } = this.props;\n    const { popinVisible } = this.state;\n\n    return (\n      <Partner.Provider>\n        <Partner.Consumer>\n          {({ partner }) => {\n            return (\n              <Row type=\"flex\">\n                <Heading\n                  button={'network.header.btn_add_partners'}\n                  onClick={this.handleOpenSearch}\n                  descriptionVariables={{ count: total }}\n                  description=\"network.header.description\"\n                  title=\"network.header.title\"\n                />\n                <Popin\n                  onClose={this.handleCloseSearch}\n                  onCancel={this.handleCloseSearch}\n                  className=\"modal-search-partners\"\n                  visible={popinVisible}\n                  footer={null}\n                >\n                  {popinVisible && (\n                    <AutocompleteSiren\n                      placeholder=\"search.company.search_placeholder\"\n                      form={null}\n                      type=\"partners\"\n                      onSelect={this.handleSelect.bind(\n                        null,\n                        partner && partner.create,\n                      )}\n                    />\n                  )}\n                </Popin>\n              </Row>\n            );\n          }}\n        </Partner.Consumer>\n      </Partner.Provider>\n    );\n  }\n}\n\nexport default compose(\n  Form.create({}),\n  Partners.hoc(),\n)(NetworkHeader);\n","import { Col, Row } from 'antd';\nimport { Card } from 'components/Card';\nimport { IPartner } from 'context/Partner/types';\nimport * as Partners from 'context/Partners';\nimport * as React from 'react';\nimport { FormattedHTMLMessage, FormattedMessage } from 'react-intl';\nimport { RouteComponentProps } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport Header from './Header';\nimport './Styles.module.less';\n\nimport CompanyAvatar from 'components/Avatar/CompanyAvatar';\nimport Infinity from 'components/Infinity';\nimport { Content } from 'components/Layout';\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {}\n\nclass Network extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  wrapperRef?: React.Component;\n  handleWrapperRef: (node: React.Component) => void;\n\n  constructor(props: any) {\n    super(props);\n\n    this.handleWrapperRef = this.setWrapperRef.bind(this);\n  }\n\n  setWrapperRef(node: React.Component) {\n    this.wrapperRef = node;\n  }\n\n  more = async (fetchMore: any, total: number, length: number) => {\n    if (fetchMore) {\n      await fetchMore({\n        updateQuery: (prev: any, { fetchMoreResult }: any) => {\n          if (!fetchMoreResult.partners) {\n            return prev;\n          }\n\n          return {\n            ...prev,\n            partners: {\n              ...prev.partners,\n              rows: [...prev.partners.rows, ...fetchMoreResult.partners.rows],\n            },\n          };\n        },\n        variables: {\n          limit: 10,\n          offset: length || 0,\n        },\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Partners.Provider limit={24} offset={0}>\n        <Partners.Consumer>\n          {data => {\n            const dataPartners = data.partners && data.partners.data;\n            const partners = dataPartners && dataPartners.partners;\n\n            const hasMore =\n              partners &&\n              partners.rows &&\n              partners.total &&\n              partners.rows.length < partners.total;\n\n            return (\n              <Infinity\n                hasMore={hasMore}\n                loadMore={this.more.bind(\n                  null,\n                  dataPartners && dataPartners.fetchMore,\n                  (partners && partners.total) || 0,\n                  partners && partners.rows ? partners.rows.length : 0,\n                )}\n              >\n                <Content>\n                  <Header\n                    total={partners && partners.total}\n                    partners={partners}\n                  />\n                  {partners && partners.rows ? (\n                    <Row type=\"flex\" gutter={16}>\n                      {partners.rows.map((partner: IPartner, i: number) => {\n                        let concatenedAddress: string | null = null;\n                        if (\n                          partner.addresses &&\n                          partner.addresses.rows &&\n                          partner.addresses.rows[0]\n                        ) {\n                          const address = partner.addresses.rows[0];\n                          concatenedAddress = `${\n                            address.address1 ? `${address.address1} ` : ''\n                          }${address.zipcode ? `${address.zipcode} ` : ''}${\n                            address.city ? `${address.city} ` : ''\n                          }${address.country ? `${address.country}` : ''}`;\n                        }\n\n                        const numberOfContacts =\n                          partner.contacts && partner.contacts.total\n                            ? partner.contacts.total\n                            : 0;\n                        return (\n                          <Col key={i} span={6}>\n                            <Link to={`/partner/${partner.id}`}>\n                              <Card\n                                center\n                                avatar={<CompanyAvatar company={partner} />}\n                                style={{\n                                  marginBottom: '50px',\n                                  minHeight: 'calc(100% - 50px)',\n                                }}\n                                shadow\n                                title={partner.name}\n                              >\n                                <div className=\"partner-card-address\">\n                                  {concatenedAddress}\n                                </div>\n                                <Row className=\"full-width space\">\n                                  <Col\n                                    className=\"network-card-invoice\"\n                                    span={12}\n                                  >\n                                    <span className=\"network-card-invoice-value\">\n                                      {partner.invoicesSent}\n                                    </span>\n                                  </Col>\n                                  <Col\n                                    className=\"network-card-invoice\"\n                                    span={12}\n                                  >\n                                    <span className=\"network-card-invoice-value\">\n                                      {partner.invoicesReceived}\n                                    </span>\n                                  </Col>\n                                </Row>\n                                <Row className=\"full-width\">\n                                  <Col\n                                    className=\"network-card-invoice\"\n                                    span={12}\n                                  >\n                                    <span className=\"network-card-invoice-title\">\n                                      <FormattedMessage id=\"partner.card.invoice_sent\" />\n                                    </span>\n                                  </Col>\n                                  <Col\n                                    className=\"network-card-invoice\"\n                                    span={12}\n                                  >\n                                    <span className=\"network-card-invoice-title\">\n                                      <FormattedMessage id=\"partner.card.invoice_received\" />\n                                    </span>\n                                  </Col>\n                                </Row>\n                                <Row align=\"middle\" className=\"space\">\n                                  <span className=\"network-card-footer\">\n                                    <FormattedHTMLMessage\n                                      id=\"partner.card.contact_number\"\n                                      values={{\n                                        count: numberOfContacts,\n                                      }}\n                                    />\n                                  </span>\n                                </Row>\n                              </Card>\n                            </Link>\n                          </Col>\n                        );\n                      })}\n                    </Row>\n                  ) : null}\n                </Content>\n              </Infinity>\n            );\n          }}\n        </Partners.Consumer>\n      </Partners.Provider>\n    );\n  }\n}\n\nexport default Network;\n","import gql from 'graphql-tag';\n\nimport Addresses from '../Addresses/fragments';\nimport Company from '../Company/fragments';\nimport Contacts from '../Contacts/fragments';\nimport Emails from '../Emails/fragments';\n\nexport const createPartner: any = gql`\n  ${Addresses.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n  ${Emails.fragment}\n\n  mutation createPartner($input: CompanyInput!) {\n    createPartner(input: $input) {\n      ${Company.query}\n    }\n  }\n`;\n\nexport const partners: any = gql`\n  ${Addresses.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n  ${Emails.fragment}\n\n  query partners($orderBy: PartnerOrder, $limit: Int, $offset: Int) {\n    partners(orderBy: $orderBy, limit: $limit, offset: $offset) {\n      total\n      rows {\n        ${Company.query}\n        invoicesSent\n        invoicesReceived\n      }\n    }\n  }\n`;\n\nexport const partner: any = gql`\n  ${Addresses.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n  ${Emails.fragment}\n\n  query partner($id: ID) {\n    partner(id: $id) {\n      ${Company.query}\n      invoicesSent\n      invoicesReceived\n    }\n  }\n`;\n","import * as React from 'react';\nimport { IInputPartner } from './types';\n\ninterface IPartnerInterface {\n  create: (obj: IInputPartner, partnersVariables: any) => any;\n  data?: any;\n}\n\nexport interface IPartnerContextInterface {\n  partner?: IPartnerInterface;\n}\n\nconst { Provider, Consumer } = React.createContext<IPartnerContextInterface>({\n  partner: {\n    create: () => {},\n    data: {},\n  },\n});\n\nexport { Provider, Consumer };\n","import gql from 'graphql-tag';\n\nimport Addresses from '../Addresses/fragments';\nimport Company from '../Company/fragments';\nimport Contacts from '../Contacts/fragments';\nimport Emails from '../Emails/fragments';\n\nexport const createPartner: any = gql`\n  ${Addresses.fragment}\n  ${Emails.fragment}\n  ${Contacts.fragment}\n\n  mutation createPartner($input: CompanyInput!) {\n    createPartner(input: $input) {\n      ${Company.input}\n    }\n  }\n`;\n\nexport const partners: any = gql`\n  ${Addresses.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n  ${Emails.fragment}\n\n  query partners($orderBy: PartnerOrder, $limit: Int, $offset: Int) {\n    partners(orderBy: $orderBy, limit: $limit, offset: $offset) {\n      total\n      rows {\n        ${Company.query}\n      }\n    }\n  }\n`;\n\nexport const partner: any = gql`\n  ${Addresses.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n  ${Emails.fragment}\n\n  query partner($id: ID) {\n    partner(id: $id) {\n      ${Company.query}\n    }\n  }\n`;\n","import { ApolloClient } from 'apollo-client';\nimport { IInputAddress } from 'context/Addresses/types';\nimport * as Alert from 'context/Alert';\nimport { ISearchParamType } from 'context/Common/types';\nimport { partner } from 'context/Partners/queries';\nimport * as User from 'context/User';\nimport * as React from 'react';\nimport { compose, graphql, withApollo } from 'react-apollo';\nimport { errorOrSuccess, mutate, request, updateStoreRows } from 'utils';\nimport { IPartnerContextInterface, Provider } from './context';\nimport { createPartner, partners } from './queries';\nimport { IInputPartner, IPartner } from './types';\n\ninterface IState extends IPartnerContextInterface {}\n\ninterface IProps extends Alert.InjectedProps, User.InjectedProps {\n  createPartner: any;\n  dataPartner: any;\n  limit: number;\n  offset: number;\n  children: React.ReactNode;\n  client: ApolloClient<any>;\n}\n\nclass PartnerContextProvider extends React.PureComponent<IProps, IState> {\n  state = {\n    partner: {\n      create: async (inputPartner: IInputPartner, partnersVariables: any) => {\n        const { dataPartner } = this.props;\n\n        let results;\n        const variables =\n          partnersVariables || (dataPartner && dataPartner.variables);\n\n        try {\n          results = await this.props.createPartner({\n            variables: { input: inputPartner },\n          });\n        } catch (e) {}\n\n        return results;\n      },\n      data: {},\n    },\n  };\n\n  render() {\n    const { dataPartner } = this.props;\n\n    return (\n      <Provider\n        value={{\n          partner: {\n            ...this.state.partner,\n            data: dataPartner,\n          },\n        }}\n      >\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n\nconst partnerHandler = {\n  options: (props: any) => {\n    return {\n      variables: {\n        id: props.id,\n      },\n    };\n  },\n  props: (props: any) => {\n    return {\n      dataPartner: props.data,\n    };\n  },\n  skip: (props: any) => typeof props.id === 'undefined',\n};\n\nexport default compose(\n  withApollo,\n  Alert.hoc(),\n  User.hoc(),\n  graphql(partner, partnerHandler),\n  graphql(createPartner, { name: 'createPartner' }),\n)(PartnerContextProvider);\n","import { Consumer, IPartnerContextInterface } from './context';\nimport hoc from './hoc';\nimport Provider from './provider';\n\nexport interface InjectedProps extends IPartnerContextInterface {}\n\nexport { Provider, Consumer, hoc };\n","import { ICompanies, IInputCompany } from 'context/Company/types';\nimport * as React from 'react';\n\nimport { ISearchParamType } from '../Common/types';\n\ninterface ISirenInterface {\n  complementaryInfos: (siren: string) => Promise<any | undefined>;\n  data: any;\n  more: (params?: ISearchParamType) => void;\n}\n\nexport interface ISirenContextInterface {\n  siren?: ISirenInterface;\n}\n\nconst { Provider, Consumer } = React.createContext<ISirenContextInterface>({\n  siren: {\n    complementaryInfos: async () => undefined,\n    data: undefined,\n    more: () => {},\n  },\n});\n\nexport { Provider, Consumer };\n","import * as React from 'react';\nimport { wrapDisplayName } from 'recompose';\nimport { Consumer, ISirenContextInterface } from './context';\n\nconst withSiren = () => <OriginalProps extends {}>(\n  Component: React.ComponentType<OriginalProps & ISirenContextInterface>,\n) => {\n  type ResultProps = OriginalProps & ISirenContextInterface;\n\n  class WithSiren extends React.Component<ResultProps> {\n    render() {\n      return (\n        <Consumer>{props => <Component {...this.props} {...props} />}</Consumer>\n      );\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    (WithSiren as any).displayName = wrapDisplayName(Component, 'withSiren');\n  }\n\n  return WithSiren;\n};\n\nexport default withSiren;\n","import gql from 'graphql-tag';\n\nimport Addresses from '../Addresses/fragments';\nimport Company from '../Company/fragments';\nimport Contacts from '../Contacts/fragments';\nimport Emails from '../Emails/fragments';\n\nexport const searchCompanies: any = gql`\n  ${Addresses.fragment}\n  ${Emails.fragment}\n  ${Contacts.fragment}\n  ${Company.fragment}\n\n  query searchCompanies($query: String!, $limit: Int, $offset: Int) {\n    searchCompanies(query: $query, limit: $limit, offset: $offset) {\n      total\n      rows {\n        ${Company.query}\n      }\n    }\n  }\n`;\n\nexport const companyWithComplementaryInfos: any = gql`\n  query companyWithComplementaryInfos($siren: String!) {\n    companyWithComplementaryInfos(siren: $siren) {\n      capital\n      legalAnnualTurnOver\n      numberEmployees\n      legalNetIncomeRange\n      phone\n    }\n  }\n`;\n","import { ApolloClient } from 'apollo-client';\nimport { ISearchParamType } from 'context/Common/types';\nimport * as React from 'react';\nimport { compose, graphql, withApollo } from 'react-apollo';\nimport { ISirenContextInterface, Provider } from './context';\nimport { companyWithComplementaryInfos, searchCompanies } from './queries';\n\ninterface IState extends ISirenContextInterface {}\n\ninterface IProps {\n  dataSiren: any;\n  limit: number;\n  offset: number;\n  children: React.ReactNode;\n  client: ApolloClient<any>;\n}\n\nclass CompanyContextProvider extends React.PureComponent<IProps, IState> {\n  state = {\n    siren: {\n      complementaryInfos: async (siren: string) => {\n        try {\n          const { data } = await this.props.client.query({\n            query: companyWithComplementaryInfos,\n            variables: { siren },\n          });\n\n          return data.companyWithComplementaryInfos;\n        } catch (e) {\n          return null;\n        }\n      },\n      data: undefined,\n      more: (params?: ISearchParamType) => {\n        const { dataSiren } = this.props;\n        const length =\n          dataSiren.searchCompanies.rows &&\n          dataSiren.searchCompanies &&\n          dataSiren.searchCompanies.rows &&\n          dataSiren.searchCompanies.rows.length;\n\n        dataSiren &&\n          dataSiren.fetchMore &&\n          dataSiren.fetchMore({\n            updateQuery: (prev: any, { fetchMoreResult }: any) => {\n              if (!fetchMoreResult.searchCompanies) {\n                return prev;\n              }\n\n              return {\n                searchCompanies: {\n                  ...prev.searchCompanies,\n                  rows: [\n                    ...prev.searchCompanies.rows,\n                    ...fetchMoreResult.searchCompanies.rows,\n                  ],\n                  total: fetchMoreResult.searchCompanies.total,\n                },\n              };\n            },\n            variables: {\n              limit: 10,\n              offset: length || 0,\n            },\n          });\n      },\n    },\n  };\n\n  render() {\n    const { siren } = this.state;\n    const { dataSiren } = this.props;\n\n    return (\n      <Provider\n        value={{\n          siren: {\n            ...siren,\n            data: dataSiren,\n          },\n        }}\n      >\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n\nconst searchCompaniesHandler = {\n  options: (props: any) => {\n    return {\n      variables: {\n        query: props.value,\n      },\n    };\n  },\n  props: (props: any) => {\n    return {\n      dataSiren: props.data,\n    };\n  },\n  skip: (props: any) =>\n    typeof props.value === 'undefined' || props.value === '',\n};\n\nexport default compose(\n  withApollo,\n  graphql(searchCompanies, searchCompaniesHandler),\n)(CompanyContextProvider);\n","import { Consumer, ISirenContextInterface } from './context';\nimport hoc from './hoc';\nimport Provider from './provider';\n\nexport interface InjectedProps extends ISirenContextInterface {}\n\nexport { Provider, Consumer, hoc };\n","import { IInputPartner } from 'context/Partner/types';\nimport * as React from 'react';\n\nimport { ISearchParamType } from '../Common/types';\n\ninterface IPartnersInterface {\n  data?: any;\n  more: (params?: ISearchParamType) => void;\n}\n\nexport interface IPartnersContextInterface {\n  partners?: IPartnersInterface;\n}\n\nconst { Provider, Consumer } = React.createContext<IPartnersContextInterface>({\n  partners: {\n    data: {},\n    more: () => {},\n  },\n});\n\nexport { Provider, Consumer };\n","import * as React from 'react';\nimport { wrapDisplayName } from 'recompose';\nimport { Consumer, IPartnersContextInterface } from './context';\n\nconst withPartners = () => <OriginalProps extends {}>(\n  Component: React.ComponentType<OriginalProps & IPartnersContextInterface>,\n) => {\n  type ResultProps = OriginalProps & IPartnersContextInterface;\n\n  class WithPartners extends React.Component<ResultProps> {\n    render() {\n      return (\n        <Consumer>{props => <Component {...this.props} {...props} />}</Consumer>\n      );\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    (WithPartners as any).displayName = wrapDisplayName(\n      Component,\n      'withPartners',\n    );\n  }\n\n  return WithPartners;\n};\n\nexport default withPartners;\n","import { ApolloClient } from 'apollo-client';\nimport * as Alert from 'context/Alert';\nimport { ISearchParamType } from 'context/Common/types';\nimport * as User from 'context/User';\nimport * as React from 'react';\nimport { compose, graphql, withApollo } from 'react-apollo';\nimport { IPartnersContextInterface, Provider } from './context';\nimport { partners } from './queries';\n\ninterface IState extends IPartnersContextInterface {}\n\ninterface IProps extends Alert.InjectedProps, User.InjectedProps {\n  createPartner: any;\n  dataPartners: any;\n  limit: number;\n  offset: number;\n  children: React.ReactNode;\n  client: ApolloClient<any>;\n}\n\nclass PartnersContextProvider extends React.PureComponent<IProps, IState> {\n  state = {\n    partners: {\n      data: {\n        variables: {},\n      },\n      more: (params?: ISearchParamType) => {\n        const { dataPartners } = this.props;\n        const length =\n          dataPartners.partners.rows &&\n          dataPartners.partners &&\n          dataPartners.partners.rows &&\n          dataPartners.partners.rows.length;\n\n        dataPartners &&\n          dataPartners.fetchMore &&\n          dataPartners.fetchMore({\n            updateQuery: (prev: any, { fetchMoreResult }: any) => {\n              if (!fetchMoreResult.partners) {\n                return prev;\n              }\n\n              return {\n                partners: {\n                  ...prev.partners,\n                  rows: [\n                    ...prev.partners.rows,\n                    ...fetchMoreResult.partners.rows,\n                  ],\n                  total: fetchMoreResult.partners.total,\n                },\n              };\n            },\n            variables: {\n              limit: 10,\n              offset: length || 0,\n            },\n          });\n      },\n    },\n  };\n\n  render() {\n    return (\n      <Provider\n        value={{\n          partners: {\n            ...this.state.partners,\n            data: this.props.dataPartners,\n          },\n        }}\n      >\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n\nconst partnersHandler = {\n  options: (props: any) => {\n    return {\n      fetchPolicy: 'network-only',\n      variables: {\n        limit: props.limit,\n        offset: props.offset,\n      },\n    };\n  },\n  props: (props: any) => {\n    return {\n      dataPartners: props.data,\n    };\n  },\n};\n\nexport default compose(\n  withApollo,\n  Alert.hoc(),\n  User.hoc(),\n  graphql(partners, partnersHandler),\n)(PartnersContextProvider);\n","import { Consumer, IPartnersContextInterface } from './context';\nimport hoc from './hoc';\nimport Provider from './provider';\n\nexport interface InjectedProps extends IPartnersContextInterface {}\n\nexport { Provider, Consumer, hoc };\n"],"sourceRoot":""}