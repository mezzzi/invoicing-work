{"version":3,"sources":["components/Chart/Reline.tsx","components/Chart/Repie.tsx","screens/Dashboard/BlocChartLine.tsx","screens/Dashboard/BlocChartPie.tsx","screens/Dashboard/BlocInvoice.tsx","screens/Dashboard/BlocOnboardingProgress.tsx","screens/Dashboard/BlocScanFacture.tsx","screens/Dashboard/index.tsx","components/Card/Card.tsx","components/Card/CondensedCard.tsx","components/Card/CardRow.tsx","components/Card/index.js","context/Invoices/context.ts","context/Invoices/queries.ts","context/Invoices/provider.tsx","context/Invoices/index.tsx","context/Invoice/queries.ts","context/Company/types.ts"],"names":["gradientArea","data","id","fade","dataMax","Math","max","apply","Object","toConsumableArray","map","i","y","dataMin","min","average","abs","react","key","concat","offset","stopColor","stopOpacity","Reline","_ref","lines","loading","Skeleton","Bloc","useSpace","className","length","es6","width","height","type","tickLine","tickFormatter","tick","moment","format","axisLine","stroke","dataKey","x1","y1","x2","y2","label","strokeDasharray","fill","dot","useState","React","RADIAN","PI","renderCustomizedLabel","intl","props","cx","cy","color","midAngle","innerRadius","outerRadius","payload","percent","radius","index","x","cos","sin","solde","textAnchor","dominantBaseline","formatMessage","dy","style","fontSize","fontWeight","round","compose","injectIntl","rows","_useState","_useState2","slicedToArray","_processLines","total","today","Date","name","value","row","days","dueDate","diff","processLines","es_row","alignItems","justifyContent","position","index_es","build_default","a","end","values","labelLine","bind","paddingAngle","entry","convert","balance","date","dateString","BlocLineChart","Balance","payout","currentBalance","getAmount","isLoadingBalance","Invoices","limit","filters","enabled","status","InvoiceStatus","ToPay","Planned","dataInvoices","invoices","arguments","undefined","now","getTime","push","forEach","months","line","valueOf","keys","sort","b","month","rowsToLines","Card","title","titleAlign","center","shadow","block","Boolean","Chart_Reline","BlocChart","state","this","isSameOrAfter","Chart_Repie","BlocInvoice","description","to","icon","count","loadingInvoices","Link","Step","steps","BlocOnboardingProgress","user","me","currentCompany","currentStep","kycStep","indexOf","flexDirection","col","flex","progressDot","Assets","IconValue","Checkmark","error","kycStatus","IKycStatus","REFUSED","Cross","Alarm","current","Profile","Briefcase","UserGroup","Paper","Wallet","PENDING","User","BlocScanFacture","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleUpload","upload","assertThisInitialized","setVisibility","BENEFICIARIES_VALIDATED","InvoiceScan","Button","onClick","Upload","Dashboard","showBlocOnboarding","VALIDATED","Layout","Typo","titleVariables","button","gutter","marginTop","span","Dashboard_BlocOnboardingProgress","Importing","Imported","Scanning","Scanned","Paid","xs","md","marginBottom","BlocChartLine","BlocChartPie","Dashboard_BlocInvoice","Search","WalletOut","Dashboard_BlocScanFacture","Default","onRemove","e","stopPropagation","preventDefault","_this$props","avatar","children","onClose","editable","onEdit","removable","primary","rest","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_12__","antd_es_card__WEBPACK_IMPORTED_MODULE_1__","assign","components_Assets__WEBPACK_IMPORTED_MODULE_10__","Pencil","Trash","antd_es_avatar__WEBPACK_IMPORTED_MODULE_3__","components_Assets__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","components_Skeleton__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_intl__WEBPACK_IMPORTED_MODULE_3__","_Card__WEBPACK_IMPORTED_MODULE_4__","CondensedCard","renderRow","react__WEBPACK_IMPORTED_MODULE_9__","antd_es_row__WEBPACK_IMPORTED_MODULE_1__","antd_es_col__WEBPACK_IMPORTED_MODULE_3__","_Card__WEBPACK_IMPORTED_MODULE_1__","d","__webpack_exports__","_CondensedCard__WEBPACK_IMPORTED_MODULE_2__","_CardRow__WEBPACK_IMPORTED_MODULE_3__","delete","more","updateStatus","_updateStatus","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","stop","shouldPoll","Provider","Consumer","gql","_templateObject","Invoice","standalone","_templateObject2","InvoiceProvider","_delete2","selectedInvoices","message","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","selectedInvoice","Symbol","iterator","done","removeInvoice","variables","sent","t0","return","finish","errorOrSuccess","alert","refresh","t1","parseError","_x","_x2","params","dataInvoice","setState","objectSpread","fetchMore","updateQuery","fetchMoreResult","_callee2","_ref2","_context2","updateInvoiceStatus","errors","_x3","_x4","_x5","refetch","componentDidMount","on","componentWillUnmount","off","dataCount","filesUploading","item","dataScanningInvoice","startPolling","stopPolling","invoicesScanningHandler","options","fetchPolicy","withApollo","Alert","graphql","skip","provider","invoice","fragments","fragment","query","updateInvoice","_templateObject3","_templateObject4","generateCode","_templateObject5","_templateObject6","payoutContacts","_templateObject7","ICompanyStatus","IPartnerOrder","reduce","o","v","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_workspace_libeoweb_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"static/js/20.210af14e.chunk.js","sourcesContent":["import Skeleton from 'components/Skeleton';\nimport moment from 'moment';\nimport * as React from 'react';\nimport {\n  Area,\n  AreaChart,\n  Line,\n  LineChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\ninterface IProps {\n  lines?: any[];\n  loading: boolean;\n}\n\nconst gradientArea = (data: any, id?: string, fade?: boolean) => {\n  const dataMax = Math.max(...data.map((i: any) => i.y));\n  const dataMin = Math.min(...data.map((i: any) => i.y));\n\n  const average =\n    100 - (Math.abs(dataMin) * 100) / (Math.abs(dataMax) + Math.abs(dataMin));\n\n  if (dataMin > 0) {\n    return [\n      <stop\n        key={id ? `${id}-1` : '1'}\n        offset=\"0%\"\n        stopColor=\"#5DBE42\"\n        stopOpacity=\"1\"\n      />,\n      <stop\n        key={id ? `${id}-2` : '2'}\n        offset=\"100%\"\n        stopColor=\"#5DBE42\"\n        stopOpacity={fade ? '0' : '1'}\n      />,\n    ];\n  }\n  if (dataMax <= 0) {\n    return [\n      <stop\n        key={id ? `${id}-2` : '2'}\n        offset=\"0%\"\n        stopColor=\"#FF5F5F\"\n        stopOpacity={fade ? '0' : '1'}\n      />,\n      <stop\n        key={id ? `${id}-1` : '1'}\n        offset=\"100%\"\n        stopColor=\"#FF5F5F\"\n        stopOpacity=\"1\"\n      />,\n    ];\n  }\n  return [\n    <stop\n      key={id ? `${id}-1` : '1'}\n      offset=\"0%\"\n      stopColor=\"#5DBE42\"\n      stopOpacity=\"1\"\n    />,\n    <stop\n      key={id ? `${id}-2` : '2'}\n      offset={`${average}%`}\n      stopColor=\"#5DBE42\"\n      stopOpacity={fade ? '0' : '1'}\n    />,\n    <stop\n      key={id ? `${id}-3` : '3'}\n      offset={`${average}%`}\n      stopColor=\"#FF5F5F\"\n      stopOpacity={fade ? '0' : '1'}\n    />,\n    <stop\n      key={id ? `${id}-4` : '4'}\n      offset=\"100%\"\n      stopColor=\"#FF5F5F\"\n      stopOpacity=\"1\"\n    />,\n  ];\n};\n\nconst Reline: React.FunctionComponent<IProps> = ({ lines, loading }) => {\n  const dateFormatter = (tick: any) => {\n    return moment(tick).format('MM/YYYY');\n  };\n\n  return (\n    <Skeleton.Bloc useSpace loading={loading} className=\"chart-wrapper\">\n      {lines && lines.length > 0 && (\n        <>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <AreaChart data={lines}>\n              <XAxis\n                // scale='time'\n                // type='number'\n                type=\"category\"\n                tickLine={false}\n                tickFormatter={dateFormatter}\n                // ticks={ticks}\n                // tickSize={ticks.length}\n\n                axisLine={false}\n                stroke=\"#ECECEC\"\n                dataKey=\"x\"\n              />\n              <YAxis stroke=\"#ECECEC\" dataKey=\"y\" />\n              {/* <Tooltip /> */}\n              <defs>\n                <linearGradient id=\"areaColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  {lines && gradientArea(lines, 'area-chart', true)}\n                </linearGradient>\n              </defs>\n              <ReferenceLine\n                y=\"0\"\n                stroke=\"#ECECEC\"\n                label=\"\"\n                strokeDasharray=\"3 3\"\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"y\"\n                stroke={0}\n                fill=\"url(#areaColor)\"\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n          <div className=\"absolute-line-chart\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={lines}>\n                <XAxis stroke=\"transparent\" dataKey=\"x\" />\n                <YAxis stroke=\"transparent\" dataKey=\"y\" />\n                <defs>\n                  <linearGradient id=\"strokeColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    {lines && gradientArea(lines, 'line-chart', false)}\n                  </linearGradient>\n                </defs>\n                <Line\n                  dot={false}\n                  type=\"monotone\"\n                  dataKey=\"y\"\n                  stroke=\"url(#strokeColor)\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </>\n      )}\n    </Skeleton.Bloc>\n  );\n};\n\nexport default Reline;\n","import { Col, Row } from 'antd';\nimport Skeleton from 'components/Skeleton';\nimport moment from 'moment';\nimport * as React from 'react';\nimport { compose } from 'react-apollo';\nimport CountUp from 'react-countup';\nimport { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';\nimport { Cell, Pie, PieChart, ResponsiveContainer } from 'recharts';\nconst { useState } = React;\n\nconst processLines = (rows: any): any => {\n  let total: number = 0;\n\n  const today: moment.Moment = moment(new Date());\n  const data = [\n    {\n      color: '#CB3043',\n      id: 'dashboard.chart.pie_legend_5',\n      name: '1-5',\n      solde: 0,\n      value: 0,\n    },\n    {\n      color: '#F66073',\n      id: 'dashboard.chart.pie_legend_20',\n      name: '5-20',\n      solde: 0,\n      value: 0,\n    },\n    {\n      color: '#FF7960',\n      id: 'dashboard.chart.pie_legend_45',\n      name: '20-45',\n      solde: 0,\n      value: 0,\n    },\n    {\n      color: '#0074F9',\n      id: 'dashboard.chart.pie_legend_more',\n      name: '+45',\n      solde: 0,\n      value: 0,\n    },\n  ];\n\n  rows &&\n    rows.map((row: any, i: number) => {\n      const dueDate: moment.Moment = moment(row.dueDate);\n      const days: number = dueDate.diff(today, 'days');\n\n      if (days < 5) {\n        data[0].value += 1;\n        data[0].solde += row.total;\n      } else if (days < 20) {\n        data[1].value += 1;\n        data[1].solde += row.total;\n      } else if (days < 45) {\n        data[2].value += 1;\n        data[2].solde += row.total;\n      } else {\n        data[3].value += 1;\n        data[3].solde += row.total;\n      }\n      total += row.total;\n    });\n\n  return {\n    data,\n    total,\n  };\n};\ninterface IProps extends InjectedIntlProps {\n  rows?: any[];\n  loading: boolean;\n}\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = (intl: any, props: any) => {\n  const {\n    cx,\n    cy,\n    color,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n    payload,\n    index,\n  } = props;\n\n  const radius = innerRadius + (outerRadius - innerRadius) * 1.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <g fill=\"red\">\n      {payload.solde > 0 && (\n        <>\n          <text\n            x={x}\n            y={y}\n            fill={color}\n            textAnchor={x > cx ? 'start' : 'end'}\n            dominantBaseline=\"central\"\n          >\n            {intl.formatMessage({\n              id: payload.id,\n            })}\n          </text>\n          <text\n            x={x}\n            y={y}\n            dy={20}\n            fill={'black'}\n            style={{\n              fontSize: '14px',\n              fontWeight: 400,\n            }}\n            textAnchor={x > cx ? 'start' : 'end'}\n            dominantBaseline=\"central\"\n          >\n            {intl.formatMessage(\n              { id: 'dashboard.chart.pie_legend_solde' },\n              { solde: Math.round(payload.solde * 100) / 100 },\n            )}\n          </text>\n        </>\n      )}\n    </g>\n  );\n};\n\nconst Repie: React.FunctionComponent<IProps> = ({ rows, loading, intl }) => {\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  // const onPieEnter = (data: any, index: number) => {\n  //   setActiveIndex(index);\n  // };\n\n  // const onPieLeave = (data: any, index: number) => {\n  //   setActiveIndex(0);\n  // };\n\n  const { data, total } = processLines(rows);\n\n  return (\n    <div className=\"chart-wrapper\">\n      <Row\n        style={{\n          alignItems: 'center',\n          height: '100%',\n          justifyContent: 'center',\n        }}\n        type=\"flex\"\n      >\n        <Skeleton.Bloc\n          style={{\n            height: '100%',\n            position: 'relative',\n            width: '100%',\n          }}\n          useSpace\n          loading={loading}\n        >\n          <span className=\"pie-total\">\n            <div className=\"pie-total-info\">\n              <FormattedMessage id=\"dashboard.chart.total_info\" />\n            </div>\n            <CountUp end={total} />\n            <FormattedMessage\n              id=\"dashboard.chart.total\"\n              values={{ solde: total }}\n            />\n          </span>\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                // activeShape={renderActiveShape}\n                labelLine={false}\n                label={renderCustomizedLabel.bind(null, intl)}\n                // activeIndex={activeIndex === 0 ? undefined : activeIndex}\n                // onMouseEnter={onPieEnter}\n                // onMouseLeave={onPieLeave}\n                data={data}\n                innerRadius={75}\n                outerRadius={100}\n                paddingAngle={0.1}\n                dataKey=\"value\"\n              >\n                {data &&\n                  data.map((entry: any, i: number) => {\n                    return <Cell key={`cell-${i}`} fill={entry.color} />;\n                  })}\n              </Pie>\n            </PieChart>\n          </ResponsiveContainer>\n        </Skeleton.Bloc>\n      </Row>\n    </div>\n  );\n};\n\nexport default compose(injectIntl)(Repie);\n","import { Card } from 'components/Card';\nimport { Reline } from 'components/Chart';\nimport Skeleton from 'components/Skeleton';\nimport * as Balance from 'context/Balance';\nimport { IBalanceInterface } from 'context/Balance/context';\nimport { IInvoice, InvoiceStatus } from 'context/Invoice/types';\nimport * as Invoices from 'context/Invoices';\nimport { IInvoicesContextInterface } from 'context/Invoices/context';\nimport moment from 'moment';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface IProps {\n  loading?: boolean;\n}\n\nconst isLoadingInvoices = (data: IInvoicesContextInterface): boolean => {\n  if (\n    data &&\n    data.invoices &&\n    data.invoices.data &&\n    data.invoices.data.loading === false\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isLoadingBalance = (balance?: IBalanceInterface): boolean => {\n  if (balance && balance.data && balance.data.loading === false) {\n    return false;\n  }\n  return true;\n};\n\nconst getAmount = (balance?: IBalanceInterface): number => {\n  return balance && balance.data && balance.data.balance\n    ? balance.data.balance.currentBalance\n    : 0;\n};\n\ninterface ILine {\n  x: number;\n  y: number;\n  dateString?: string;\n}\n\nconst convert = (balance: number, date: number): ILine => {\n  return {\n    dateString: moment(date).format('MM/YYYY'),\n    x: date,\n    y: balance,\n  };\n};\n\nconst rowsToLines = (balance: number = 0, rows?: IInvoice[]): ILine[] => {\n  const lines: ILine[] = [];\n  const now = new Date().getTime();\n\n  if (rows && rows.length > 0) {\n    lines.push(convert(0, now));\n\n    rows &&\n      rows.forEach(\n        (row: IInvoice) =>\n          new Date(row.dueDate).getTime() > now &&\n          lines.push(convert(row.total, new Date(row.dueDate).getTime())),\n      );\n\n    let months: any = [];\n    lines.forEach(line => {\n      if (line.dateString) {\n        if (!months[line.dateString]) {\n          months[line.dateString] = { x: line.dateString, y: 0 };\n        }\n        months[line.dateString] = {\n          x: moment(`01/${line.dateString}`, 'DD/MM/YYYY').valueOf(),\n          y: line.y + months[line.dateString].y,\n        };\n      }\n    });\n\n    months = Object.keys(months).map((key: string) => ({\n      x: months[key].x,\n      y: months[key].y,\n    }));\n\n    months.sort((a: ILine, b: ILine) => a.x - b.y);\n\n    months = [\n      {\n        x: new Date().getTime(),\n        y: balance,\n      },\n      ...months.map((month: ILine) => ({\n        x: month.x,\n        y: balance -= month.y,\n      })),\n    ];\n    return months;\n  }\n\n  return lines;\n};\n\nconst BlocLineChart: React.FunctionComponent<IProps> = props => {\n  let loading = props.loading;\n\n  return (\n    <Balance.Provider balance>\n      <Balance.Consumer>\n        {({ balance }) => {\n          const payout = getAmount(balance);\n          loading = isLoadingBalance(balance);\n\n          return (\n            <Invoices.Provider\n              offset={0}\n              limit={100}\n              filters={{\n                enabled: true,\n                status: [InvoiceStatus.ToPay, InvoiceStatus.Planned],\n              }}\n            >\n              <Invoices.Consumer>\n                {dataInvoices => {\n                  const rows =\n                    dataInvoices.invoices &&\n                    dataInvoices.invoices.data &&\n                    dataInvoices.invoices.data.invoices &&\n                    dataInvoices.invoices.data.invoices.rows;\n\n                  loading = isLoadingInvoices(dataInvoices);\n                  const lines = rowsToLines(payout, rows);\n\n                  return (\n                    <Card\n                      title={\n                        <FormattedMessage id=\"dashboard.chart.line_title\" />\n                      }\n                      titleAlign=\"left\"\n                      center\n                      shadow\n                    >\n                      <div className=\"chart-dashboard-line\">\n                        <Skeleton.Bloc\n                          block\n                          className=\"chart-dashboard-solde\"\n                          loading={Boolean(loading)}\n                        >\n                          <FormattedMessage\n                            id=\"dashboard.chart.line_solde\"\n                            values={{ solde: payout }}\n                          />\n                        </Skeleton.Bloc>\n                        <Skeleton.Bloc\n                          block\n                          className=\"chart-dashboard-description\"\n                          loading={Boolean(loading)}\n                        >\n                          <FormattedMessage\n                            id=\"dashboard.chart.line_solde_waiting\"\n                            values={{ solde: payout }}\n                          />\n                        </Skeleton.Bloc>\n                        <div className=\"chart-wrapper-outer\">\n                          <Reline loading={Boolean(loading)} lines={lines} />\n                        </div>\n                      </div>\n                    </Card>\n                  );\n                }}\n              </Invoices.Consumer>\n            </Invoices.Provider>\n          );\n        }}\n      </Balance.Consumer>\n    </Balance.Provider>\n  );\n};\n\nexport default BlocLineChart;\n","import { Card } from 'components/Card';\nimport { Repie } from 'components/Chart';\nimport Skeleton from 'components/Skeleton';\nimport { IInvoice, InvoiceStatus } from 'context/Invoice/types';\nimport * as Invoices from 'context/Invoices';\nimport moment from 'moment';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface IProps {\n  loading?: boolean;\n}\ninterface IState {}\n\nclass BlocChart extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  render() {\n    let loading = this.props.loading;\n\n    return (\n      <Invoices.Provider\n        offset={0}\n        limit={100}\n        filters={{\n          enabled: true,\n          status: [InvoiceStatus.ToPay, InvoiceStatus.Planned],\n        }}\n      >\n        <Invoices.Consumer>\n          {dataInvoices => {\n            loading = true;\n            if (\n              dataInvoices &&\n              dataInvoices.invoices &&\n              dataInvoices.invoices.data &&\n              dataInvoices.invoices.data.loading === false\n            ) {\n              loading = false;\n            }\n\n            const invoices =\n              dataInvoices.invoices &&\n              dataInvoices.invoices.data &&\n              dataInvoices.invoices.data.invoices;\n\n            const rows =\n              invoices && invoices.rows\n                ? invoices.rows.sort(\n                    (a: IInvoice, b: IInvoice) =>\n                      new Date(a.dueDate).getTime() -\n                      new Date(b.dueDate).getTime(),\n                  )\n                : undefined;\n\n            const today = moment(new Date());\n            let data: any[] | undefined;\n            if (rows) {\n              data = [];\n              rows.map((row: IInvoice) => {\n                const dueDate: moment.Moment = moment(row.dueDate);\n                if (dueDate.isSameOrAfter(today)) {\n                  data && data.push(row);\n                }\n              });\n            }\n\n            return (\n              <Card\n                title={<FormattedMessage id=\"dashboard.chart.pie_title\" />}\n                titleAlign=\"left\"\n                center\n                shadow\n              >\n                <div className=\"chart-dashboard-pie\">\n                  <Skeleton.Bloc\n                    useSpace\n                    className=\"chart-wrapper-outer\"\n                    loading={Boolean(loading)}\n                  >\n                    <Repie loading={Boolean(loading)} rows={data} />\n                  </Skeleton.Bloc>\n                </div>\n              </Card>\n            );\n          }}\n        </Invoices.Consumer>\n      </Invoices.Provider>\n    );\n  }\n}\n\nexport default BlocChart;\n","import { IconValue } from 'components/Assets/Icon';\nimport { CondensedCard } from 'components/Card';\nimport { InvoiceStatus } from 'context/Invoice/types';\nimport * as Invoices from 'context/Invoices';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport './BlocInvoice.module.less';\n\ninterface IProps {\n  status: InvoiceStatus[];\n  color?: string;\n  icon: IconValue;\n  to: string;\n  style?: React.CSSProperties;\n  description: string;\n  loading?: boolean;\n}\n\nconst BlocInvoice: React.FunctionComponent<IProps> = ({\n  status,\n  description,\n  color,\n  loading,\n  to,\n  style,\n  icon,\n}) => {\n  return (\n    <Invoices.Provider offset={0} limit={1} count={status}>\n      <Invoices.Consumer>\n        {data => {\n          const count =\n            data.invoices &&\n            data.invoices.count &&\n            data.invoices.count.invoices;\n\n          let loadingInvoices = false;\n          if (!data.invoices) {\n            loadingInvoices = true;\n          } else if (data.invoices && data.invoices.loading) {\n            loadingInvoices = true;\n          }\n\n          return (\n            <Link to={to}>\n              <CondensedCard\n                style={style}\n                loading={loading || loadingInvoices}\n                center={false}\n                className=\"bloc-invoice-count\"\n                color={color}\n                title={count ? count.total : ''}\n                description={description}\n                icon={icon}\n              />\n            </Link>\n          );\n        }}\n      </Invoices.Consumer>\n    </Invoices.Provider>\n  );\n};\n\nexport default BlocInvoice;\n","import { Col, Row, Steps } from 'antd';\nimport { Icon } from 'components/Assets';\nimport { IconValue } from 'components/Assets/Icon';\nimport { Card } from 'components/Card';\nimport { ICompany, IKycStatus } from 'context/Company/types';\nimport * as Upload from 'context/Upload';\nimport * as User from 'context/User';\nimport { IUser } from 'context/User/types';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\nconst Step = Steps.Step;\n\ninterface IProps extends User.InjectedProps {}\ninterface IState {}\n\nclass BlocOnboardingProgress extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  render() {\n    const { user } = this.props;\n    const me: IUser = user && user.data && user.data.me;\n    const currentCompany: ICompany = me && me.currentCompany;\n\n    let currentStep: number = -1;\n    if (currentCompany && currentCompany.kycStep) {\n      currentStep = 0;\n      if (currentCompany.kycStep.indexOf('PERSONNAL_INFORMATION') > -1) {\n        currentStep = 1;\n      }\n      if (currentCompany.kycStep.indexOf('BENEFICIARIES') > -1) {\n        currentStep = 2;\n      }\n      if (currentCompany.kycStep.indexOf('SIGN') > -1) {\n        currentStep = 3;\n      }\n      if (currentCompany.kycStep.indexOf('IBAN') > -1) {\n        currentStep = 4;\n      }\n    }\n\n    const customDot = (\n      dot: any,\n      { status, index }: { status: string; index: number },\n    ) => {\n      let icon;\n      switch (status) {\n        case 'finish':\n          icon = (\n            <div className={`dot-${status}`}>\n              <Icon value={IconValue.Checkmark} />\n            </div>\n          );\n          break;\n        case 'process':\n          if (index === 4) {\n            const error: boolean =\n              currentCompany.kycStatus === IKycStatus.REFUSED;\n            icon = (\n              <div className={`dot-${status}${error ? ' error' : ''}`}>\n                <Icon value={error ? IconValue.Cross : IconValue.Alarm} />\n              </div>\n            );\n          } else {\n            icon = (\n              <div className={`dot-${status}`}>\n                <Icon value={IconValue.Alarm} />\n              </div>\n            );\n          }\n          break;\n        default:\n          icon = dot;\n          break;\n      }\n      return icon;\n    };\n\n    return (\n      <Card\n        center\n        style={{\n          flexDirection: 'row',\n        }}\n        shadow\n      >\n        <Row\n          type=\"flex\"\n          style={{\n            alignItems: 'center',\n            width: '100%',\n          }}\n        >\n          <Col\n            style={{\n              flex: 1,\n            }}\n          >\n            <Steps progressDot={customDot} current={currentStep}>\n              <Step\n                title={\n                  <>\n                    <Icon value={IconValue.Profile} />\n                    <FormattedMessage id=\"dashboard.kyc.company\" />\n                  </>\n                }\n              />\n              <Step\n                title={\n                  <>\n                    <Icon value={IconValue.Briefcase} />\n                    <FormattedMessage id=\"dashboard.kyc.informations\" />\n                  </>\n                }\n              />\n              <Step\n                title={\n                  <>\n                    <Icon value={IconValue.UserGroup} />\n                    <FormattedMessage id=\"dashboard.kyc.beneficiary\" />\n                  </>\n                }\n              />\n              <Step\n                title={\n                  <>\n                    <Icon value={IconValue.Paper} />\n                    <FormattedMessage id=\"dashboard.kyc.contract\" />\n                  </>\n                }\n              />\n              <Step\n                title={\n                  <>\n                    <Icon value={IconValue.Wallet} />\n                    <FormattedMessage id=\"dashboard.kyc.iban\" />\n                  </>\n                }\n              />\n            </Steps>\n          </Col>\n          {currentCompany && currentCompany.kycStatus === IKycStatus.PENDING && (\n            <div className=\"ant-btn ant-btn-default\">\n              <Link to=\"/kyc-summary\">\n                <FormattedMessage id=\"dashboard.incomplete.btn_summary\" />\n              </Link>\n            </div>\n          )}\n          {!currentCompany && (\n            <div className=\"ant-btn ant-btn-default\">\n              <Link to=\"/kyc\">\n                <FormattedMessage id=\"dashboard.incomplete.btn_start\" />\n              </Link>\n            </div>\n          )}\n          {currentCompany && !currentCompany.kycStatus && (\n            <div className=\"ant-btn ant-btn-default\">\n              <Link to=\"/kyc\">\n                <FormattedMessage id=\"dashboard.incomplete.btn_complete\" />\n              </Link>\n            </div>\n          )}\n        </Row>\n      </Card>\n    );\n  }\n}\n\nexport default User.hoc()(BlocOnboardingProgress);\n","import { Icon } from 'components/Assets';\nimport { IconValue } from 'components/Assets/Icon';\nimport { Button } from 'components/Button';\nimport { Card } from 'components/Card';\nimport { ICompany, IKycStatus } from 'context/Company/types';\nimport * as Upload from 'context/Upload';\nimport * as User from 'context/User';\nimport { IUser } from 'context/User/types';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface IProps extends User.InjectedProps, Upload.InjectedProps {}\ninterface IState {}\n\nclass BlocScanFacture extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  handleUpload: () => void;\n\n  constructor(props: any) {\n    super(props);\n\n    this.handleUpload = this.upload.bind(this);\n  }\n\n  upload() {\n    const { upload } = this.props;\n    const setVisibility = upload && upload.setVisibility;\n    if (setVisibility) {\n      setVisibility(true);\n    }\n  }\n\n  render() {\n    const { user } = this.props;\n    const me: IUser = user && user.data && user.data.me;\n    const currentCompany: ICompany = me && me.currentCompany;\n\n    let currentStep: number = 0;\n    if (currentCompany) {\n      if (\n        typeof currentCompany.kycStatus === 'undefined' ||\n        currentCompany.kycStatus === null\n      ) {\n        currentStep = 0;\n      } else {\n        switch (currentCompany.kycStatus) {\n          case IKycStatus.BENEFICIARIES_VALIDATED:\n            currentStep = 2;\n            break;\n          default:\n            currentStep = 1;\n            break;\n        }\n      }\n    }\n\n    return (\n      <Card\n        center\n        className=\"card-dashboard\"\n        style={{\n          flexDirection: 'row',\n        }}\n        shadow\n      >\n        <Icon color=\"#1F87FF\" value={IconValue.InvoiceScan} />\n        <div className=\"card-dashboard-title\">\n          <FormattedMessage id=\"dashboard.incomplete.import_facture_title\" />\n        </div>\n        <div className=\"card-dashboard-description\">\n          <FormattedMessage id=\"dashboard.incomplete.import_facture_description\" />\n        </div>\n        <Button onClick={this.handleUpload}>\n          <FormattedMessage id=\"dashboard.incomplete.btn_import_facture\" />\n        </Button>\n      </Card>\n    );\n  }\n}\n\nexport default User.hoc()(Upload.hoc()(BlocScanFacture));\n","import { Col, Row, Steps } from 'antd';\nimport { IconValue } from 'components/Assets/Icon';\nimport { Button } from 'components/Button';\nimport { Content } from 'components/Layout';\nimport { Heading } from 'components/Typo';\nimport { ICompany, IKycStatus, KycStatus } from 'context/Company/types';\nimport { InvoiceStatus } from 'context/Invoice/types';\nimport * as Invoices from 'context/Invoices';\nimport * as Upload from 'context/Upload';\nimport * as User from 'context/User';\nimport { IUser } from 'context/User/types';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport BlocChartLine from './BlocChartLine';\nimport BlocChartPie from './BlocChartPie';\nimport BlocInvoice from './BlocInvoice';\nimport BlocOnboardingProgress from './BlocOnboardingProgress';\nimport BlocScanFacture from './BlocScanFacture';\nimport './Dashboard.module.less';\n\ninterface IProps extends User.InjectedProps, Upload.InjectedProps {}\ninterface IState {}\n\nclass Dashboard extends React.PureComponent<IProps, IState> {\n  state = {};\n\n  handleUpload: () => void;\n\n  constructor(props: any) {\n    super(props);\n\n    this.handleUpload = this.upload.bind(this);\n  }\n\n  upload() {\n    const { upload } = this.props;\n    const setVisibility = upload && upload.setVisibility;\n    if (setVisibility) {\n      setVisibility(true);\n    }\n  }\n\n  render() {\n    const { user } = this.props;\n    const me: IUser = user && user.data && user.data.me;\n    const currentCompany: ICompany = me && me.currentCompany;\n    let loading = true;\n    if (user && user.data && user.data.loading === false) {\n      loading = false;\n    }\n\n    const showBlocOnboarding: boolean =\n      !loading &&\n      (!currentCompany || currentCompany.kycStatus !== IKycStatus.VALIDATED);\n\n    let title = 'dashboard.incomplete.header_title';\n    let description = 'dashboard.incomplete.header_description';\n    if (!showBlocOnboarding) {\n      title = 'dashboard.complete.header_title';\n      description = 'dashboard.complete.header_description';\n    }\n\n    return (\n      <Content className=\"dashboard\">\n        <Row\n          type=\"flex\"\n          style={{\n            justifyContent: 'flex-end',\n          }}\n        >\n          <Heading\n            loading={loading}\n            title={title}\n            titleVariables={me}\n            description={description}\n            button=\"dashboard.header.upload_btn\"\n            onClick={this.handleUpload}\n          />\n        </Row>\n        {!loading && showBlocOnboarding && (\n          <Row gutter={28} style={{ marginTop: 28 }}>\n            <Col span={18}>\n              <BlocOnboardingProgress />\n            </Col>\n          </Row>\n        )}\n        <Invoices.Provider\n          offset={0}\n          limit={1}\n          count={[\n            InvoiceStatus.Importing,\n            InvoiceStatus.Imported,\n            InvoiceStatus.Scanning,\n            InvoiceStatus.Scanned,\n            InvoiceStatus.ToPay,\n            InvoiceStatus.Planned,\n            InvoiceStatus.Paid,\n          ]}\n        >\n          <Invoices.Consumer>\n            {data => {\n              const invoices =\n                data.invoices &&\n                data.invoices.count &&\n                data.invoices.count.invoices;\n\n              loading = true;\n              if (\n                data.invoices &&\n                data.invoices.count &&\n                data.invoices.count.loading === false\n              ) {\n                loading = false;\n              }\n\n              return invoices && (invoices.total > 0 || loading) ? (\n                <>\n                  <Row type=\"flex\" style={{ marginTop: 28 }} gutter={28}>\n                    <Col xs={24} md={18}>\n                      <Row type=\"flex\" gutter={28}>\n                        <Col\n                          style={{\n                            marginBottom: '28px',\n                          }}\n                          xs={24}\n                          md={12}\n                        >\n                          <BlocChartLine loading={loading} />\n                        </Col>\n                        <Col\n                          style={{\n                            marginBottom: '28px',\n                          }}\n                          xs={24}\n                          md={12}\n                        >\n                          <BlocChartPie loading={loading} />\n                        </Col>\n                      </Row>\n                    </Col>\n                    <Col xs={24} md={6}>\n                      <Row type=\"flex\" gutter={28}>\n                        <Col\n                          style={{\n                            marginBottom: '28px',\n                          }}\n                          xs={12}\n                          md={24}\n                        >\n                          <BlocInvoice\n                            loading={loading}\n                            to=\"/purchase/draft\"\n                            status={[\n                              InvoiceStatus.Scanning,\n                              InvoiceStatus.Scanned,\n                            ]}\n                            color=\"primary\"\n                            description=\"dashboard.bloc.invoice_to_control\"\n                            icon={IconValue.Search}\n                          />\n                        </Col>\n                        <Col\n                          style={{\n                            marginBottom: '28px',\n                          }}\n                          xs={12}\n                          md={24}\n                        >\n                          <BlocInvoice\n                            loading={loading}\n                            to=\"/purchase/bills\"\n                            status={[\n                              InvoiceStatus.ToPay,\n                              InvoiceStatus.Planned,\n                            ]}\n                            color=\"red\"\n                            description=\"dashboard.bloc.invoice_to_pay\"\n                            icon={IconValue.WalletOut}\n                          />\n                        </Col>\n                      </Row>\n                    </Col>\n                  </Row>\n                </>\n              ) : (\n                !loading && invoices && (\n                  <Row gutter={28} style={{ marginTop: 28 }}>\n                    <Col span={18}>\n                      <BlocScanFacture />\n                    </Col>\n                  </Row>\n                )\n              );\n            }}\n          </Invoices.Consumer>\n        </Invoices.Provider>\n      </Content>\n    );\n  }\n}\n\nexport default User.hoc()(Upload.hoc()(Dashboard));\n","import { Avatar, Card } from 'antd';\nimport { CardProps } from 'antd/lib/card';\nimport { Icon } from 'components/Assets';\nimport { IconValue } from 'components/Assets/Icon';\nimport * as React from 'react';\n\n/**\n * @props\n */\ninterface IProps extends CardProps {\n  center?: boolean;\n  avatar?: React.ReactNode | string;\n  onClose?: () => void;\n  editable?: boolean;\n  onEdit?: () => void;\n  removable?: boolean;\n  onRemove?: () => void;\n  shadow?: boolean;\n  primary?: boolean;\n  title?: React.ReactNode;\n  titleAlign?: 'left' | 'right';\n}\n\n/**\n * @state\n *\n * error\n */\ninterface IState {}\n\n/**\n * @class Submit\n *\n */\nclass Default extends React.PureComponent<IProps, IState> {\n  onRemove = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { onRemove } = this.props;\n    onRemove && onRemove();\n  };\n\n  render() {\n    const {\n      avatar,\n      center,\n      children,\n      className,\n      onClose,\n      editable,\n      onEdit,\n      removable,\n      shadow,\n      title,\n      primary,\n      titleAlign,\n      ...rest\n    } = this.props;\n\n    return (\n      <Card\n        className={`card-item${center ? ' center ' : ''}${\n          shadow ? ' shadow ' : ''\n        }${primary ? ' primary ' : ''}${className ? ` ${className}` : ''}`}\n        {...rest}\n      >\n        {onClose && (\n          <div onClick={onClose} className=\"card-close\">\n            <Icon value={IconValue.Cross} />\n          </div>\n        )}\n        {editable && (\n          <div onClick={onEdit} className=\"card-edit\">\n            <Icon value={IconValue.Pencil} />\n          </div>\n        )}\n        {removable && (\n          <div onClick={this.onRemove} className=\"card-remove\">\n            <Icon value={IconValue.Trash} />\n          </div>\n        )}\n        {avatar && <Avatar className=\"card-avatar\">{avatar}</Avatar>}\n        {title && (\n          <div className={`card-title${titleAlign ? ` ${titleAlign}` : ''}`}>\n            {title}\n          </div>\n        )}\n        <div className=\"card-children\">{children}</div>\n      </Card>\n    );\n  }\n}\n\nexport default Default;\n","import { Icon } from 'components/Assets';\nimport { IconValue } from 'components/Assets/Icon';\nimport Skeleton from 'components/Skeleton';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Card from './Card';\n\n/**\n * @props\n */\ninterface IProps {\n  center?: boolean;\n  className?: string;\n  title?: React.ReactNode;\n  description?: string;\n  color?: string;\n  icon?: IconValue;\n  loading?: boolean;\n  style?: React.CSSProperties;\n}\n\nconst CondensedCard: React.FunctionComponent<IProps> = ({\n  className,\n  center,\n  title,\n  description,\n  icon,\n  style,\n  loading,\n  color,\n}) => {\n  return (\n    <Card\n      style={style}\n      center={center}\n      className={`condensed-card${className ? ` ${className}` : ''}`}\n      shadow\n    >\n      <div className=\"condensed-card-left\">\n        <Skeleton.Bloc\n          loading={Boolean(loading)}\n          className=\"condensed-card-title\"\n        >\n          {title}\n        </Skeleton.Bloc>\n        {description && (\n          <Skeleton.Bloc\n            loading={Boolean(loading)}\n            className=\"condensed-card-description\"\n          >\n            <FormattedMessage id={description} />\n          </Skeleton.Bloc>\n        )}\n      </div>\n      <div className={`condensed-card-right${color ? ` ${color}` : ''}`}>\n        <Icon value={icon} />\n      </div>\n    </Card>\n  );\n};\n\nexport default CondensedCard;\n","import { Col, Row } from 'antd';\nimport * as React from 'react';\n\n/**\n * @props\n */\ninterface IProps {\n  className?: string;\n  title?: React.ReactNode | string;\n  rows?: React.ReactNode[];\n  renderRow?: (row: React.ReactNode) => React.ReactNode;\n}\n\n/**\n * @state\n *\n * error\n */\ninterface IState {}\n\n/**\n * @class Submit\n *\n */\nclass Default extends React.PureComponent<IProps, IState> {\n  render() {\n    const { className, title, rows, renderRow } = this.props;\n\n    return (\n      <Row className={`${className ? 'className ' : ''}`}>\n        <div className=\"card-row-title\">{title}</div>\n        {rows &&\n          rows.map((row, i) => (\n            <Col className=\"card-row-item\" key={`${i}`}>\n              {renderRow ? renderRow(row) : row}\n            </Col>\n          ))}\n      </Row>\n    );\n  }\n}\n\nexport default Default;\n","import './Styles.module.less';\n\nimport Card from './Card';\nimport CondensedCard from './CondensedCard';\nimport CardRow from './CardRow';\n\nexport {\n  Card,\n  CardRow,\n  CondensedCard\n};\n","import { ISearchParamType } from 'context/Common/types';\nimport { IInvoice, InvoiceStatus } from 'context/Invoice/types';\nimport * as React from 'react';\n\nexport interface IInvoicesSearchType {\n  // orderBy?: IPartnerOrder;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface IInvoicesInterface {\n  count: any;\n  data: any;\n  delete: (selectedInvoices: IInvoice[], message?: string) => void;\n  loading: boolean;\n  more: (params?: ISearchParamType) => void;\n  // refresh: () => void;\n  updateStatus: (\n    id: string,\n    status: InvoiceStatus,\n    message?: string,\n  ) => Promise<IInvoice | undefined>;\n}\n\nexport interface IInvoicesContextInterface {\n  invoices?: IInvoicesInterface;\n  shouldPoll: boolean;\n}\n\nconst { Provider, Consumer } = React.createContext<IInvoicesContextInterface>({\n  invoices: {\n    count: {},\n    data: {},\n    delete: () => {},\n    loading: false,\n    more: () => {},\n    // refresh: () => {},\n    updateStatus: async () => undefined,\n  },\n  shouldPoll: false,\n});\n\nexport { Provider, Consumer };\n","import gql from 'graphql-tag';\n\nimport Invoice from '../Invoice/fragments';\n\nexport const invoices: any = gql`\n  query invoices($filters: InvoiceFilters, $limit: Int, $offset: Int) {\n    invoices(filters: $filters, limit: $limit, offset: $offset) {\n      total\n      rows {\n        ${Invoice.standalone}\n      }\n    }\n  }\n`;\n\nexport const count: any = gql`\n  query invoices($filters: InvoiceFilters, $limit: Int, $offset: Int) {\n    invoices(filters: $filters, limit: $limit, offset: $offset) {\n      total\n    }\n  }\n`;\n","import { ApolloClient, ApolloError } from 'apollo-client';\nimport * as Alert from 'context/Alert';\nimport { ISearchParamType } from 'context/Common/types';\nimport { removeInvoice, updateInvoiceStatus } from 'context/Invoice/queries';\nimport * as Upload from 'context/Upload';\nimport * as React from 'react';\nimport { compose, graphql, withApollo } from 'react-apollo';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport { errorOrSuccess, mutate, parseError, request } from 'utils';\nimport { IInvoice, IInvoiceInput, InvoiceStatus } from '../Invoice/types';\nimport {\n  IInvoicesContextInterface,\n  IInvoicesSearchType,\n  Provider,\n} from './context';\nimport { count, invoices } from './queries';\nimport { IInvoices } from './types';\n\ninterface IState extends IInvoicesContextInterface {}\n\ninterface IProps\n  extends InjectedIntlProps,\n    Alert.InjectedProps,\n    Upload.InjectedProps {\n  count: InvoiceStatus[];\n  children: React.ReactNode;\n  client: ApolloClient<any>;\n  removeInvoice: any;\n  updateInvoiceStatus: any;\n  dataInvoice: any;\n  dataScanningInvoice: any;\n  dataCount: any;\n  id: string;\n  filters: any;\n  limit: number;\n  offset: number;\n}\n\nclass InvoiceProvider extends React.PureComponent<IProps, IState> {\n  static getDerivedStateFromProps(props: IProps, state: IState) {\n    const { upload } = props;\n    const loading =\n      upload && upload.filesUploading && upload.filesUploading.length > 0\n        ? true\n        : false;\n\n    if (props.dataInvoice && props.dataInvoice.invoices) {\n      let shouldPoll = false;\n\n      props.dataInvoice.invoices &&\n        props.dataInvoice.invoices.rows &&\n        props.dataInvoice.invoices.rows.map((item: any) => {\n          if (\n            item &&\n            !item.error &&\n            (item.status === InvoiceStatus.Importing ||\n              item.status === InvoiceStatus.Imported ||\n              item.status === InvoiceStatus.Scanning)\n          ) {\n            shouldPoll = true;\n          }\n        });\n\n      if (!loading && shouldPoll !== state.shouldPoll) {\n        if (shouldPoll) {\n          props.dataScanningInvoice.startPolling(5000);\n        }\n        if (!shouldPoll) {\n          props.dataScanningInvoice.stopPolling();\n        }\n        return { shouldPoll };\n      }\n    }\n    return state;\n  }\n\n  state = {\n    invoices: {\n      count: {},\n      data: {},\n      delete: async (selectedInvoices: IInvoice[], message?: string) => {\n        try {\n          for (const selectedInvoice of selectedInvoices) {\n            const results = await this.props.removeInvoice({\n              variables: { id: selectedInvoice.id },\n            });\n          }\n\n          // user && user.refresh();\n          errorOrSuccess(this.props.alert, [], [message || '']);\n\n          this.refresh();\n        } catch (e) {\n          errorOrSuccess(this.props.alert, parseError(e));\n        }\n      },\n      loading: false,\n      more: (params?: ISearchParamType) => {\n        const { dataInvoice } = this.props;\n\n        if (this.state && this.state.invoices.loading) {\n          return null;\n        }\n\n        const length =\n          dataInvoice.invoices.rows &&\n          dataInvoice.invoices &&\n          dataInvoice.invoices.rows &&\n          dataInvoice.invoices.rows.length;\n\n        this.setState({\n          invoices: {\n            ...this.state.invoices,\n            loading: true,\n          },\n        });\n\n        dataInvoice &&\n          dataInvoice.fetchMore &&\n          dataInvoice.fetchMore({\n            updateQuery: (prev: any, { fetchMoreResult }: any) => {\n              if (!fetchMoreResult.invoices) {\n                return prev;\n              }\n\n              this.setState({\n                invoices: {\n                  ...this.state.invoices,\n                  loading: false,\n                },\n              });\n              return {\n                invoices: {\n                  ...prev.invoices,\n                  rows: [\n                    ...prev.invoices.rows,\n                    ...fetchMoreResult.invoices.rows,\n                  ],\n                  total: fetchMoreResult.invoices.total,\n                },\n              };\n            },\n            variables: {\n              limit: 10,\n              offset: length || 0,\n            },\n          });\n      },\n      // refresh: this.refresh,\n      updateStatus: async (\n        id: string,\n        status: InvoiceStatus,\n        message?: string,\n      ) => {\n        try {\n          const { errors, data } = await this.props.updateInvoiceStatus({\n            variables: { id, status },\n          });\n\n          // user && user.refresh();\n          errorOrSuccess(this.props.alert, [], message ? [message] : undefined);\n          // this.state.invoices.refresh && this.state.invoices.refresh();\n          return data.updateInvoiceStatus;\n        } catch (e) {\n          errorOrSuccess(this.props.alert, parseError(e));\n        }\n      },\n    },\n    shouldPoll: false,\n  };\n\n  refresh = () => {\n    this.props.dataInvoice && this.props.dataInvoice.refetch();\n  };\n\n  componentDidMount = () => {\n    const { upload } = this.props;\n    upload && upload.on(this.refresh);\n  };\n\n  componentWillUnmount = () => {\n    const { upload } = this.props;\n    upload && upload.off(this.refresh);\n  };\n\n  render() {\n    const { dataInvoice, dataCount } = this.props;\n\n    return (\n      <Provider\n        value={{\n          ...this.state,\n          invoices: {\n            ...this.state.invoices,\n            count: dataCount,\n            data: dataInvoice,\n          },\n        }}\n      >\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\n\nconst invoicesHandler = {\n  options: (props: any) => {\n    return {\n      fetchPolicy: 'network-only',\n      variables: {\n        filters: props.filters,\n        limit: props.limit,\n        offset: props.offset,\n      },\n    };\n  },\n  props: (props: any) => {\n    return {\n      dataInvoice: props.data,\n    };\n  },\n  skip: (props: any) => props.count,\n};\n\nconst invoicesScanningHandler = {\n  options: (props: any) => {\n    return {\n      fetchPolicy: 'network-only',\n      variables: {\n        filters: {\n          enabled: true,\n          status: [\n            InvoiceStatus.Importing,\n            InvoiceStatus.Imported,\n            InvoiceStatus.Scanning,\n          ],\n        },\n      },\n    };\n  },\n  props: (props: any) => {\n    return {\n      dataScanningInvoice: props.data,\n    };\n  },\n};\n\nconst countHandler = {\n  options: (props: any) => {\n    return {\n      fetchPolicy: 'network-only',\n      limit: 1,\n      variables: {\n        filters: {\n          enabled: true,\n          status: props.count,\n        },\n        offset: 0,\n      },\n    };\n  },\n  props: (props: any) => {\n    return {\n      dataCount: props.data,\n    };\n  },\n  skip: (props: any) => !props.count,\n};\n\nexport default compose(\n  withApollo,\n  injectIntl,\n  Alert.hoc(),\n  Upload.hoc(),\n  graphql(removeInvoice, { name: 'removeInvoice' }),\n  graphql(invoices, invoicesHandler),\n  graphql(invoices, invoicesScanningHandler),\n  graphql(count, countHandler),\n  graphql(updateInvoiceStatus, { name: 'updateInvoiceStatus' }),\n)(InvoiceProvider as any);\n","import {\n  Consumer,\n  IInvoicesContextInterface,\n  IInvoicesInterface,\n} from './context';\nimport hoc from './hoc';\nimport Provider from './provider';\n\nexport interface InjectedProps extends IInvoicesContextInterface {}\n\nexport { Provider, Consumer, hoc };\n","import gql from 'graphql-tag';\n\nimport fragments from './fragments';\n\nexport const invoice: any = gql`\n  ${fragments.fragment}\n\n  query invoice($id: ID!) {\n    invoice(id: $id) {\n      ${fragments.query}\n    }\n  }\n`;\n\nexport const updateInvoice: any = gql`\n  ${fragments.fragment}\n\n  mutation updateInvoice($id: ID!, $input: UpdateInvoiceInput!) {\n    updateInvoice(id: $id, input: $input) {\n      ${fragments.query}\n    }\n  }\n`;\n\nexport const updateInvoiceStatus: any = gql`\n  ${fragments.fragment}\n\n  mutation updateInvoiceStatus($id: ID!, $status: InvoiceStatus!) {\n    updateInvoiceStatus(id: $id, status: $status) {\n      ${fragments.query}\n    }\n  }\n`;\n\nexport const removeInvoice: any = gql`\n  mutation removeInvoice($id: ID!) {\n    removeInvoice(id: $id) {\n      id\n    }\n  }\n`;\n\nexport const generateCode: any = gql`\n  mutation generateCode($invoiceId: ID!) {\n    generateCode(invoiceId: $invoiceId) {\n      id\n    }\n  }\n`;\n\nexport const payout: any = gql`\n  ${fragments.fragment}\n\n  mutation payout($invoiceId: ID!, $date: String, $code: String) {\n    payout(invoiceId: $invoiceId, date: $date, code: $code) {\n      ${fragments.query}\n    }\n  }\n`;\n\nexport const payoutContacts: any = gql`\n  mutation payoutContacts($invoiceId: ID!, $contactIds: [ID]) {\n    payoutContacts(invoiceId: $invoiceId, contactIds: $contactIds)\n  }\n`;\n","import { IAddress, IInputAddress } from 'context/Addresses/types';\nimport { IContact, IInputContact } from 'context/Contacts/types';\n\nexport enum ICompanyStatus {\n  unknown = 'UNKNOW',\n  exist = 'EXIST',\n  already = 'ALREADY',\n  self = 'SELF',\n}\n\nexport enum IKycStatus {\n  CONTRACT_SIGNED = 'CONTRACT_SIGNED',\n  BENEFICIARIES_ADDED = 'BENEFICIARIES_ADDED',\n  BENEFICIARIES_VALIDATED = 'BENEFICIARIES_VALIDATED',\n  PENDING = 'PENDING',\n  SUMMARY = 'SUMMARY',\n  VALIDATED = 'VALIDATED',\n  REFUSED = 'REFUSED',\n}\n\nexport const KycStatus: any = Object.keys(IKycStatus).reduce(\n  (o, v, i) => ({ ...o, [v]: i }),\n  {},\n);\n\nexport enum IPartnerOrder {\n  createdAt_ASC = 'createdAt_ASC',\n  createdAt_DESC = 'createdAt_DESC',\n  updatedAt_ASC = 'updatedAt_ASC',\n  updatedAt_DESC = 'updatedAt_DESC',\n}\n\nexport interface ICompany {\n  id: number;\n  siren: string;\n  siret: string;\n  name: string;\n  brandName: string;\n  naf: string;\n  nafNorm: string;\n  numberEmployees: string;\n  legalForm: string;\n  category: string;\n  incorporateAt: number;\n  vatNumber: string;\n  source: string;\n  slogan: string;\n  domainName: string;\n  capital: number;\n  invoicesSent: number;\n  invoicesReceived: number;\n  phone: string;\n  treezorEmail: string;\n  treezorUserId: number;\n  treezorWalletId: number;\n  treezorIban: string;\n  treezorBic: string;\n  incorporationAt: Date;\n  createdAt: Date;\n  updatedAt: Date;\n  status: ICompanyStatus;\n  kycStep: string;\n  kycStatus: IKycStatus;\n  addresses?: {\n    total: number;\n    rows: IAddress[];\n  };\n  contacts?: {\n    total: number;\n    rows: IContact[];\n  };\n}\n\nexport interface ICompanies {\n  total: number;\n  rows: ICompany[];\n}\n\nexport interface IInputCompany {\n  siren?: string;\n  siret?: string;\n  name?: string;\n  brandName?: string;\n  naf?: string;\n  nafNorm?: string;\n  numberEmployees?: string;\n  legalForm?: string;\n  slogan?: string;\n  domainName?: string;\n  category?: string;\n  vatNumber?: string;\n  incorporationAt?: Date;\n  capital?: number;\n  legalAnnualTurnOver?: string;\n  legalNetIncomeRange?: string;\n  phone?: string;\n  addresses?: IInputAddress[];\n}\n"],"sourceRoot":""}