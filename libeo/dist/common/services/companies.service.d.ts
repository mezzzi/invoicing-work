import { Repository } from 'typeorm';
import { Company, CompanyStatus, CompanyKycStatus } from '../entities/company.entity';
import { SirenService } from '../../siren/siren.service';
import { Partner } from '../entities/partner.entity';
import { User } from '../entities/user.entity';
import { Email } from '../entities/email.entity';
import { List } from '../interfaces/common.interface';
import { Contact } from '../entities/contact.entity';
import { CreateOrUpdateCompanyDto } from '../dto/companies.dto';
import { TreezorService } from '../../payment/treezor.service';
import { IDocument } from '../../payment/interfaces/treezor/document.interface';
import { ITaxResidence } from '../../payment/interfaces/treezor/taxresidence.interface';
import { IComplementaryInfos } from '../interfaces/company.interface';
import { AccountingPreference } from '../entities/accounting-preference.entity';
import { IUser } from '../../payment/interfaces/treezor/user.interface';
import { Mandate } from '../entities/mandate.entity';
import { BankAccount } from '../entities/bank-account.entity';
import { ZendeskService } from '../../notification/zendesk.service';
import { File } from '../interfaces/file.interface';
import { LogoStorageService } from '../../storage/logo-storage.service';
export declare class CompaniesService {
    private readonly companyRepository;
    private readonly partnerRepository;
    private readonly contactRepository;
    private readonly emailRepository;
    private readonly accountingPreferenceRepository;
    private readonly bankAccountRepository;
    private readonly mandateRepository;
    private readonly sirenService;
    private readonly treezorService;
    private readonly zendeskService;
    private readonly logoStorageService;
    constructor(companyRepository: Repository<Company>, partnerRepository: Repository<Partner>, contactRepository: Repository<Contact>, emailRepository: Repository<Email>, accountingPreferenceRepository: Repository<AccountingPreference>, bankAccountRepository: Repository<BankAccount>, mandateRepository: Repository<Mandate>, sirenService: SirenService, treezorService: TreezorService, zendeskService: ZendeskService, logoStorageService: LogoStorageService);
    private createAccountingPreferences;
    private delay;
    private createWallet;
    private createMoralUser;
    private createPhysicalUsers;
    private hydrateCompanyWithTreezor;
    getClaimer(companyId: string): Promise<User | null>;
    uploadLogo(file: File, company: Company): Promise<string>;
    createCompanyShell(user: User): Promise<Company>;
    createOrUpdateCompany(user: User, data?: CreateOrUpdateCompanyDto, id?: string): Promise<Company>;
    searchCompanies(query: string, orderBy?: string, limit?: number, offset?: number): Promise<any>;
    findOneById(id: string): Promise<Company>;
    findOneBySiren(siren: string): Promise<Company>;
    findOneBySiret(siret: string): Promise<Company>;
    getCurrentCompanyByUser(user: User): Promise<Company>;
    getStatus(user: User, company: Company): Promise<CompanyStatus>;
    findByUser(user: User, orderBy?: string, limit?: number, offset?: number): Promise<List>;
    getContract(company: Company): Promise<string>;
    signContract(user: User): Promise<boolean>;
    createBeneficiary(user: User, data: any): Promise<any>;
    removeBeneficiary(company: Company, userId: number): Promise<IUser>;
    getTaxResidence(userId: number, country: string): Promise<ITaxResidence>;
    createOrUpdateTaxResidence(userId: number, taxPayerId: string, country: string): Promise<any>;
    removeDocument(documentId: number): Promise<IDocument>;
    getRepresentatives(company: Company): Promise<List>;
    getBeneficiaries(company: Company, limit?: number, page?: number): Promise<List>;
    getDocuments(userId: number, limit?: number, page?: number): Promise<List>;
    updateKycStatus(user: User, status: CompanyKycStatus): Promise<Company>;
    updateKycStep(company: Company, step: string): Promise<Company>;
    getCompanyComplementaryInfos(siren: string): Promise<IComplementaryInfos>;
    getSignedMandate(company: Company): Promise<Mandate>;
}
